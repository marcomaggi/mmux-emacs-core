\input texinfo.tex
@c %**start of header
@setfilename mmux-emacs-core.info
@settitle MMUX Emacs Core
@c %**end of header

@include version.texi
@include macros.texi
@include elisp-macros.texi

@c page
@c ------------------------------------------------------------
@c Values.
@c ------------------------------------------------------------

@set TITLE                      @mmux{} Emacs Core

@c To be used as @value{PACKAGE} whenever we need to include the full
@c name of this package.
@set PACKAGE                    @mmux{} Emacs Core

@c To be used as @value{PACKAGE} whenever we need to include the
@c nickname of the project: the name that is used to compose the
@c distribution tarball or the web address.
@set PACKAGE_NICKNAME           mmux-emacs-core

@c To be used as @value{AUTHOR} whenever we need to include the list of
@c authors of this document.
@set AUTHOR                     Marco Maggi

@c To be used as @value{AUTHOR_EMAIL} whenever we need to include the
@c email of the *single* author of this document.
@set AUTHOR_EMAIL               @email{mrc.mgg@@gmail.com}

@c To be used as @value{COPYRIGHT_YEARS} whenever we need to include the
@c list of copyright years.
@set COPYRIGHT_YEARS            2020

@c ------------------------------------------------------------

@set PackageAutoconfPrefix              MMUX_EMACS_CORE
@set PackagePkgconfigModule             @code{mmux-emacs-core}
@set PackageLibsVar                     @env{MMUX_EMACS_CORE_LIBS}
@set PackageCflagsVar                   @env{MMUX_EMACS_CORE_CFLAGS}

@set PackageLibstem                     @file{mmux-emacs-core}
@set PackageSharedLibraryBasename       @file{libmmux-emacs-core}

@set PackageEmacsModule                 @file{mmec}
@set PackageHeader                      mmux-emacs-core.h
@set PackageHeaderFile                  @file{@value{PackageHeader}}

@set PackageApiCPrefixLower             mmec_
@set PackageApiCPrefixUpper             MMEC_
@set PackageApiElispPrefix              mmec-

@set GithubUrl                 @url{https://github.com/marcomaggi/@value{PACKAGE_NICKNAME}}
@set BitbucketUrl              @url{https://bitbucket.org/marcomaggi/@value{PACKAGE_NICKNAME}}
@set DownloadUrl               @url{https://bitbucket.org/marcomaggi/@value{PACKAGE_NICKNAME}/downloads}
@set DocumentationUrl          @url{https://marcomaggi.github.io/docs/@value{PACKAGE_NICKNAME}.html}

@set RequiredEmacsVersion       26+

@c page
@c ------------------------------------------------------------
@c Local macros.
@c ------------------------------------------------------------


@c page
@c ------------------------------------------------------------
@c Copyright notice.
@c ------------------------------------------------------------

@copying
This package installs a @gnu{} Emacs module, written in Emacs Lisp, on top of a C11 language library
implementing an Emacs dynamic module; these modules provide basic infrastructure to write dynamic
modules for Emacs, especially interfaces to foreign C language libraries.

This package supports @posix{} platforms.  This package is meant to work with @gnu{} Emacs version
@value{RequiredEmacsVersion}.  This package depends upon the external packages: @code{cl-lib}. To
run the test suite: this package requires the @code{ert} package.

This package is distributed under the terms of the @gnu{} General Public License (@gpl{}).

The latest release can be downloaded from:

@center @value{DownloadUrl}

@noindent
development takes place at:

@center @value{GithubUrl}

@noindent
and as backup at:

@center @value{BitbucketUrl}

@noindent
Copyright @copyright{} @value{COPYRIGHT_YEARS} by @value{AUTHOR} @value{AUTHOR_EMAIL}@*

@quotation
Permission is granted to copy, distribute and/or modify this document under the terms of the @gnu{}
Free Documentation License, Version 1.3 or any later version published by the Free Software
Foundation; with Invariant Sections being ``@gnu{} Free Documentation License'' and ``@gnu{} General
Public License'', no Front--Cover Texts, and no Back--Cover Texts.  A copy of the license is
included in the section entitled ``@gnu{} Free Documentation License''.
@end quotation
@end copying

@c page
@c ------------------------------------------------------------
@c Headers.
@c ------------------------------------------------------------

@titlepage
@title @value{TITLE}
@subtitle Revision @value{VERSION}
@author @value{AUTHOR} @value{AUTHOR_EMAIL}
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c ------------------------------------------------------------

@ifinfo
@dircategory Development
@direntry
* mmux-emacs-core: (mmux-emacs-core).  MMUX Emacs Core a core library.
@end direntry
@end ifinfo

@c ------------------------------------------------------------

@ignore
@syncodeindex tp cp
@syncodeindex vr cp
@syncodeindex fn cp
@end ignore

@c page
@ifnottex
@node Top
@top @value{TITLE}

@insertcopying

@menu
* overview::                    Overview of the package.
* version::                     Version functions.
* constants::                   Constant values.
* ctypes::                      Object wrappers for C language types.
* bytevectors::                 Bytevector objects.
* errors::                      How errors are signalled.
* capi::                        C language programming interface.

Appendices

* Package License::             GNU General Public License.
* Documentation License::       GNU Free Documentation License.
* references::                  Bibliography and references.

Indexes

* concept index::               An entry for each concept.
* function index::              An entry for each function.
* variable index::              An entry for each variable.
* type index::                  An entry for each type.

External documents

* modules: (elisp)Writing Dynamic Modules.
@end menu
@end ifnottex

@c page
@node overview
@chapter Overview of the package


This document describes version @value{VERSION} of @value{PACKAGE}; this package installs a @gnu{}
Emacs module, written in Emacs Lisp, on top of a C11 language library implementing an Emacs dynamic
module; these modules provide basic infrastructure to write dynamic modules for Emacs, especially
interfaces to foreign C language libraries.

This package supports @posix{} platforms.  This package is meant to work with @gnu{} Emacs version
@value{RequiredEmacsVersion}.  This package depends upon the external packages: @code{cl-lib}.  To
run the test suite: this package requires the @code{ert} package.

@value{PACKAGE} installs various elisp modules, the main one being @value{PackageEmacsModule}; it
also installs a C language shared library with basename @value{PackageSharedLibraryBasename} (using
the @gnu{} Libtool infrastructure).  All the elisp definition names are prefixed with
@code{@value{PackageApiElispPrefix}}.  The C language shared library is installed under
@samp{$libdir}, for example:

@center @file{/usr/local/lib64}

@noindent
while the elisp module goes under @samp{$lispdir}, for example:

@center @file{/usr/local/share/emacs/site-lisp}

@noindent
so to load the module (under an Emacs installation with dynamic modules enabled) we should do
something like:

@lisp
(add-to-list 'load-path "/usr/local/lib64"
                        "/usr/local/share/emacs/site-lisp")
(require 'mmec)
@end lisp

@cindex @value{PackageHeaderFile}, header file
@cindex Header file @value{PackageHeaderFile}
It might be possible that we want to write a C language library making use of the facilities of this
package; so @value{PACKAGE} installs the single header file @value{PackageHeaderFile}.  All the C
language function names in the @api{} are prefixed with @code{@value{PackageApiCPrefixLower}}; all
the C language preprocessor symbol names are prefixed with @code{@value{PackageApiCPrefixUpper}};
all the type names are prefixed with @code{@value{PackageApiCPrefixLower}} and suffixed with
@code{_t}.

@menu
* overview linking::            Linking code with the library.
@end menu

@include overview-linking.texi

@c page
@node version
@chapter Version functions


The installed libraries follow version numbering as established by the @gnu{} Autotools.  For an
explanation of interface numbers as managed by @gnu{} Libtool @xref{Libtool versioning, interface,
Libtool's versioning system, libtool, Shared library support for @gnu{}}.


@defun mmec-version-string
Return a string representing the interface version number.
@end defun


@defun mmec-version-interface-current
Return an integer representing the library interface current number.
@end defun


@defun mmec-version-interface-revision
Return an integer representing the library interface current revision number.
@end defun


@defun mmec-version-interface-age
Return an integer representing the library interface current age.
@end defun

@c page
@node constants
@chapter Constant values


@menu
* constants sizeof::            Size of common C language types.
* constants limits::            Ranges representable by C language types.
* constants float::             Constants related to floating-point numbers.
@end menu

@c page
@node constants sizeof
@section Size of common C language types


The following syntactic bindings are defined in the module @file{mmec-constants}, which is required by
@value{PackageEmacsModule}.


@deftypevr {Constant} integer mmec-SIZEOF_CHAR
Size of @code{char} measured in bytes.
@end deftypevr


@deftypevr {Constant} integer mmec-SIZEOF_SIGNED_CHAR
Size of @code{signed char} measured in bytes.
@end deftypevr


@deftypevr {Constant} integer mmec-SIZEOF_UNSIGNED_CHAR
Size of @code{unsigned char} measured in bytes.
@end deftypevr


@deftypevr {Constant} integer mmec-SIZEOF_WCHAR
Size of @code{wchar_t} measured in bytes.
@end deftypevr


@deftypevr {Constant} integer mmec-SIZEOF_SIGNED_SHORT_INT
Size of @code{signed short int} measured in bytes.
@end deftypevr


@deftypevr {Constant} integer mmec-SIZEOF_UNSIGNED_SHORT_INT
Size of @code{signed short int} measured in bytes.
@end deftypevr


@deftypevr {Constant} integer mmec-SIZEOF_SIGNED_INT
Size of @code{signed int} measured in bytes.
@end deftypevr


@deftypevr {Constant} integer mmec-SIZEOF_UNSIGNED_INT
Size of @code{signed int} measured in bytes.
@end deftypevr


@deftypevr {Constant} integer mmec-SIZEOF_UNSIGNED_INT
Size of @code{unsigned int} measured in bytes.
@end deftypevr


@deftypevr {Constant} integer mmec-SIZEOF_UNUNSIGNED_INT
Size of @code{unsigned int} measured in bytes.
@end deftypevr


@deftypevr {Constant} integer mmec-SIZEOF_SIGNED_LONG_INT
Size of @code{signed long int} measured in bytes.
@end deftypevr


@deftypevr {Constant} integer mmec-SIZEOF_UNSIGNED_LONG_INT
Size of @code{signed long int} measured in bytes.
@end deftypevr


@deftypevr {Constant} integer mmec-SIZEOF_UNSIGNED_LONG_INT
Size of @code{unsigned long int} measured in bytes.
@end deftypevr


@deftypevr {Constant} integer mmec-SIZEOF_UNUNSIGNED_LONG_INT
Size of @code{unsigned long int} measured in bytes.
@end deftypevr


@deftypevr {Constant} integer mmec-SIZEOF_SIGNED_LONG_LONG_INT
Size of @code{signed long long int} measured in bytes.
@end deftypevr


@deftypevr {Constant} integer mmec-SIZEOF_UNSIGNED_LONG_LONG_INT
Size of @code{signed long long int} measured in bytes.
@end deftypevr


@deftypevr {Constant} integer mmec-SIZEOF_UNSIGNED_LONG_LONG_INT
Size of @code{unsigned long long int} measured in bytes.
@end deftypevr


@deftypevr {Constant} integer mmec-SIZEOF_UNUNSIGNED_LONG_LONG_INT
Size of @code{unsigned long long int} measured in bytes.
@end deftypevr


@deftypevr {Constant} integer mmec-SIZEOF_SIZE_T
Size of @code{size_t} measured in bytes.
@end deftypevr


@deftypevr {Constant} integer mmec-SIZEOF_SSIZE_T
Size of @code{ssize_t} measured in bytes.
@end deftypevr


@deftypevr {Constant} integer mmec-SIZEOF_INTMAX_T
Size of @code{intmax_t} measured in bytes.
@end deftypevr


@deftypevr {Constant} integer mmec-SIZEOF_UINTMAX_T
Size of @code{uintmax_t} measured in bytes.
@end deftypevr


@deftypevr {Constant} integer mmec-SIZEOF_INT8_T
Size of @code{int8_t} measured in bytes.
@end deftypevr


@deftypevr {Constant} integer mmec-SIZEOF_UINT8_T
Size of @code{uint8_t} measured in bytes.
@end deftypevr


@deftypevr {Constant} integer mmec-SIZEOF_INT16_T
Size of @code{int16_t} measured in bytes.
@end deftypevr


@deftypevr {Constant} integer mmec-SIZEOF_UINT16_T
Size of @code{uint16_t} measured in bytes.
@end deftypevr


@deftypevr {Constant} integer mmec-SIZEOF_INT32_T
Size of @code{int32_t} measured in bytes.
@end deftypevr


@deftypevr {Constant} integer mmec-SIZEOF_UINT32_T
Size of @code{uint32_t} measured in bytes.
@end deftypevr


@deftypevr {Constant} integer mmec-SIZEOF_INT64_T
Size of @code{int64_t} measured in bytes.
@end deftypevr


@deftypevr {Constant} integer mmec-SIZEOF_UINT64_T
Size of @code{uint64_t} measured in bytes.
@end deftypevr


@deftypevr {Constant} integer mmec-SIZEOF_FLOAT
Size of @code{float} measured in bytes.
@end deftypevr


@deftypevr {Constant} integer mmec-SIZEOF_DOUBLE
Size of @code{double} measured in bytes.
@end deftypevr


@deftypevr {Constant} integer mmec-SIZEOF_LONG_DOUBLE
Size of @code{long double} measured in bytes.
@end deftypevr

@c page
@node constants limits
@section Ranges representable by C language types


The following syntactic bindings are defined in the module @file{mmec-constants}, which is required by
@value{PackageEmacsModule}.


@deftypevr {Constant} integer mmec-SCHAR_MIN
Exact integer representing the minimum value representable by a @code{signed char}.
@end deftypevr


@deftypevr {Constant} integer mmec-SCHAR_MAX
Exact integer representing the maximum value representable by a @code{signed char}.
@end deftypevr


@deftypevr {Constant} integer mmec-CHAR_MIN
Exact integer representing the minimum value representable by a @code{char}.
@end deftypevr


@deftypevr {Constant} integer mmec-CHAR_MAX
Exact integer representing the maximum value representable by a @code{char}.
@end deftypevr


@deftypevr {Constant} integer mmec-UCHAR_MIN
Exact integer representing the minimum value representable by a @code{unsigned char}.
@end deftypevr


@deftypevr {Constant} integer mmec-UCHAR_MAX
Exact integer representing the maximum value representable by a @code{unsigned char}.
@end deftypevr


@deftypevr {Constant} integer mmec-SHRT_MIN
Exact integer representing the minimum value representable by a @code{signed short int}.
@end deftypevr


@deftypevr {Constant} integer mmec-SHRT_MAX
Exact integer representing the maximum value representable by a @code{signed short int}.
@end deftypevr


@deftypevr {Constant} integer mmec-USHRT_MIN
Exact integer representing the minimum value representable by a @code{unsigned short int}.
@end deftypevr


@deftypevr {Constant} integer mmec-USHRT_MAX
Exact integer representing the maximum value representable by a @code{unsigned short int}.
@end deftypevr


@deftypevr {Constant} integer mmec-INT_MIN
Exact integer representing the minimum value representable by a @code{signed int}.
@end deftypevr


@deftypevr {Constant} integer mmec-INT_MAX
Exact integer representing the maximum value representable by a @code{signed int}.
@end deftypevr


@deftypevr {Constant} integer mmec-UINT_MIN
Exact integer representing the minimum value representable by a @code{unsigned int}.
@end deftypevr


@deftypevr {Constant} integer mmec-UINT_MAX
Exact integer representing the maximum value representable by a @code{unsigned int}.
@end deftypevr


@deftypevr {Constant} integer mmec-LONG_MIN
Exact integer representing the minimum value representable by a @code{signed long int}.
@end deftypevr


@deftypevr {Constant} integer mmec-LONG_MAX
Exact integer representing the maximum value representable by a @code{signed long int}.
@end deftypevr


@deftypevr {Constant} integer mmec-ULONG_MIN
Exact integer representing the minimum value representable by a @code{unsigned long int}.
@end deftypevr


@deftypevr {Constant} integer mmec-ULONG_MAX
Exact integer representing the maximum value representable by a @code{unsigned long int}.
@end deftypevr


@deftypevr {Constant} integer mmec-LLONG_MIN
Exact integer representing the minimum value representable by a @code{signed long long int}.
@end deftypevr


@deftypevr {Constant} integer mmec-LLONG_MAX
Exact integer representing the maximum value representable by a @code{signed long long int}.
@end deftypevr


@deftypevr {Constant} integer mmec-ULLONG_MIN
Exact integer representing the minimum value representable by a @code{unsigned long long int}.
@end deftypevr


@deftypevr {Constant} integer mmec-ULLONG_MAX
Exact integer representing the maximum value representable by a @code{unsigned long long int}.
@end deftypevr


@deftypevr {Constant} integer mmec-WCHAR_MIN
Exact integer representing the minimum value representable by a @code{wchar_t}.
@end deftypevr


@deftypevr {Constant} integer mmec-WCHAR_MAX
Exact integer representing the maximum value representable by a @code{wchar_t}.
@end deftypevr


@deftypevr {Constant} integer mmec-SIZE_T_MIN
Exact integer representing the minimum value representable by a @code{size_t}.
@end deftypevr


@deftypevr {Constant} integer mmec-SIZE_T_MAX
Exact integer representing the maximum value representable by a @code{size_t}.
@end deftypevr


@deftypevr {Constant} integer mmec-SSIZE_T_MIN
Exact integer representing the minimum value representable by a @code{ssize_t}.
@end deftypevr


@deftypevr {Constant} integer mmec-SSIZE_T_MAX
Exact integer representing the maximum value representable by a @code{ssize_t}.
@end deftypevr


@deftypevr {Constant} integer mmec-INTMAX_MIN
Exact integer representing the minimum value representable by a @code{intmax_t}.
@end deftypevr


@deftypevr {Constant} integer mmec-INTMAX_MAX
Exact integer representing the maximum value representable by a @code{intmax_t}.
@end deftypevr


@deftypevr {Constant} integer mmec-UINTMAX_MIN
Exact integer representing the maximum value representable by a @code{uintmax_t}.
@end deftypevr


@deftypevr {Constant} integer mmec-INT8_MIN
Exact integer representing the minimum value representable by a @code{int8_t}.
@end deftypevr


@deftypevr {Constant} integer mmec-INT8_MAX
Exact integer representing the maximum value representable by a @code{int8_t}.
@end deftypevr


@deftypevr {Constant} integer mmec-UINT8_MIN
Exact integer representing the minimum value representable by a @code{uint8_t}.
@end deftypevr


@deftypevr {Constant} integer mmec-UINT8_MAX
Exact integer representing the maximum value representable by a @code{uint8_t}.
@end deftypevr


@deftypevr {Constant} integer mmec-INT16_MIN
Exact integer representing the minimum value representable by a @code{int16_t}.
@end deftypevr


@deftypevr {Constant} integer mmec-INT16_MAX
Exact integer representing the maximum value representable by a @code{int16_t}.
@end deftypevr


@deftypevr {Constant} integer mmec-UINT16_MIN
Exact integer representing the minimum value representable by a @code{uint16_t}.
@end deftypevr


@deftypevr {Constant} integer mmec-UINT16_MAX
Exact integer representing the maximum value representable by a @code{uint16_t}.
@end deftypevr


@deftypevr {Constant} integer mmec-INT32_MIN
Exact integer representing the minimum value representable by a @code{int32_t}.
@end deftypevr


@deftypevr {Constant} integer mmec-INT32_MAX
Exact integer representing the maximum value representable by a @code{int32_t}.
@end deftypevr


@deftypevr {Constant} integer mmec-UINT32_MIN
Exact integer representing the minimum value representable by a @code{uint32_t}.
@end deftypevr


@deftypevr {Constant} integer mmec-UINT32_MAX
Exact integer representing the maximum value representable by a @code{uint32_t}.
@end deftypevr


@deftypevr {Constant} integer mmec-INT64_MIN
Exact integer representing the minimum value representable by a @code{int64_t}.
@end deftypevr


@deftypevr {Constant} integer mmec-INT64_MAX
Exact integer representing the maximum value representable by a @code{int64_t}.
@end deftypevr


@deftypevr {Constant} integer mmec-UINT64_MIN
Exact integer representing the minimum value representable by a @code{uint64_t}.
@end deftypevr


@deftypevr {Constant} integer mmec-UINT64_MAX
Exact integer representing the maximum value representable by a @code{uint64_t}.
@end deftypevr

@c page
@node constants float
@section Constants related to floating--point numbers


The following syntactic bindings are defined in the module @file{mmec-constants}, which is required by
@value{PackageEmacsModule}.


@defvr {Constant} mmec-FLT_ROUNDS
Value of the system constant @code{FLT_ROUNDS}.
@end defvr


@defvr {Constant} mmec-FLT_RADIX
Value of the system constant @code{FLT_RADIX}.
@end defvr


@defvr {Constant} mmec-FLT_MANT_DIG
Value of the system constant @code{FLT_MANT_DIG}.
@end defvr


@defvr {Constant} mmec-DBL_MANT_DIG
Value of the system constant @code{DBL_MANT_DIG}.
@end defvr


@defvr {Constant} mmec-LDBL_MANT_DIG
Value of the system constant @code{LDBL_MANT_DIG}.
@end defvr


@defvr {Constant} mmec-FLT_DIG
Value of the system constant @code{FLT_DIG}.
@end defvr


@defvr {Constant} mmec-DBL_DIG
Value of the system constant @code{DBL_DIG}.
@end defvr


@defvr {Constant} mmec-LDBL_DIG
Value of the system constant @code{LDBL_DIG}.
@end defvr


@defvr {Constant} mmec-FLT_MIN_EXP
Value of the system constant @code{FLT_MIN_EXP}.
@end defvr


@defvr {Constant} mmec-DBL_MIN_EXP
Value of the system constant @code{DBL_MIN_EXP}.
@end defvr


@defvr {Constant} mmec-LDBL_MIN_EXP
Value of the system constant @code{LDBL_MIN_EXP}.
@end defvr


@defvr {Constant} mmec-FLT_MIN_10_EXP
Value of the system constant @code{FLT_MIN_10_EXP}.
@end defvr


@defvr {Constant} mmec-DBL_MIN_10_EXP
Value of the system constant @code{DBL_MIN_10_EXP}.
@end defvr


@defvr {Constant} mmec-LDBL_MIN_10_EXP
Value of the system constant @code{LDBL_MIN_10_EXP}.
@end defvr


@defvr {Constant} mmec-FLT_MAX_EXP
Value of the system constant @code{FLT_MAX_EXP}.
@end defvr


@defvr {Constant} mmec-DBL_MAX_EXP
Value of the system constant @code{DBL_MAX_EXP}.
@end defvr


@defvr {Constant} mmec-LDBL_MAX_EXP
Value of the system constant @code{LDBL_MAX_EXP}.
@end defvr


@defvr {Constant} mmec-FLT_MAX_10_EXP
Value of the system constant @code{FLT_MAX_10_EXP}.
@end defvr


@defvr {Constant} mmec-DBL_MAX_10_EXP
Value of the system constant @code{DBL_MAX_10_EXP}.
@end defvr


@defvr {Constant} mmec-LDBL_MAX_10_EXP
Value of the system constant @code{LDBL_MAX_10_EXP}.
@end defvr


@defvr {Constant} mmec-FLT_MAX
Value of the system constant @code{FLT_MAX}.
@end defvr


@defvr {Constant} mmec-DBL_MAX
Value of the system constant @code{DBL_MAX}.
@end defvr


@defvr {Constant} mmec-LDBL_MAX
Value of the system constant @code{LDBL_MAX}.
@end defvr


@defvr {Constant} mmec-FLT_MIN
Value of the system constant @code{FLT_MIN}.
@end defvr


@defvr {Constant} mmec-DBL_MIN
Value of the system constant @code{DBL_MIN}.
@end defvr


@defvr {Constant} mmec-LDBL_MIN
Value of the system constant @code{LDBL_MIN}.
@end defvr


@defvr {Constant} mmec-FLT_EPSILON
Value of the system constant @code{FLT_EPSILON}.
@end defvr


@defvr {Constant} mmec-DBL_EPSILON
Value of the system constant @code{DBL_EPSILON}.
@end defvr


@defvr {Constant} mmec-LDBL_EPSILON
Value of the system constant @code{LDBL_EPSILON}.
@end defvr

@c page
@node ctypes
@chapter Object wrappers for C language types.


@value{PACKAGE} defines elisp data types in the module @value{PackageEmacsModule}.  Many wrappers
for integer types are implemented for safety of writing interfaces to C language library and for
better dispatching of multimethods.

@quotation
@strong{NOTE} At the time of this writing (Feb 2, 2020) @gnu{} Emacs version 26 internally
represents exact integer objects with values of type C language @code{intmax_t}, but not the whole
range of such type is available.
@end quotation

@menu
* ctypes typedefs::             Object type definitions.
* ctypes comparison::           Comparison operations.
@end menu

@c page
@node ctypes typedefs
@section Object type definitions


@menu
* ctypes typedefs base::        Base type definitions.
* ctypes typedefs char::        Wrapper for @code{char}.
* ctypes typedefs schar::       Wrapper for @code{signed char}.
* ctypes typedefs uchar::       Wrapper for @code{unsigned char}.
* ctypes typedefs wchar::       Wrapper for @code{wchar_t}.
* ctypes typedefs sshrt::       Wrapper for @code{signed short int}.
* ctypes typedefs ushrt::       Wrapper for @code{unsigned short int}.
* ctypes typedefs sint::        Wrapper for @code{signed int}.
* ctypes typedefs uint::        Wrapper for @code{unsigned int}.
* ctypes typedefs slong::       Wrapper for @code{signed long int}.
* ctypes typedefs ulong::       Wrapper for @code{unsigned long int}.
* ctypes typedefs sllong::      Wrapper for @code{signed long long int}.
* ctypes typedefs ullong::      Wrapper for @code{unsigned long long int}.
* ctypes typedefs ssize::       Wrapper for @code{ssize_t}.
* ctypes typedefs usize::       Wrapper for @code{size_t}.
* ctypes typedefs sintmax::     Wrapper for @code{intmax_t}.
* ctypes typedefs uintmax::     Wrapper for @code{uintmax_t}.
* ctypes typedefs ptrdiff::     Wrapper for @code{ptrdiff_t}.
* ctypes typedefs sint8::       Wrapper for @code{int8_t}.
* ctypes typedefs uint8::       Wrapper for @code{uint8_t}.
* ctypes typedefs sint16::      Wrapper for @code{int16_t}.
* ctypes typedefs uint16::      Wrapper for @code{uint16_t}.
* ctypes typedefs sint32::      Wrapper for @code{int32_t}.
* ctypes typedefs uint32::      Wrapper for @code{uint32_t}.
* ctypes typedefs sint64::      Wrapper for @code{int64_t}.
* ctypes typedefs uint64::      Wrapper for @code{uint64_t}.
* ctypes typedefs float::       Wrapper for @code{float}.
* ctypes typedefs double::      Wrapper for @code{double}.
* ctypes typedefs ldouble::     Wrapper for @code{long double}.
@end menu

@c page
@node ctypes typedefs base
@subsection Base type definitions


The following syntactic bindings are defined in the module @value{PackageEmacsModule}.  All the
following types are to be considered ``abstract'', so we must not instantiate them.


@deftp {Abstract Object Type} mmec-number
Base type of all the custom number types defined by this module.
@end deftp


@deftp {Abstract Object Type} mmec-integer
@deftpx {Parent Type} mmec-number
Base type of all the custom exact integer number types defined by this module.
@end deftp


@deftp {Abstract Object Type} mmec-signed-integer
@deftpx {Parent Type} mmec-integer
Base type of all the custom exact signed integer number types defined by this module.
@end deftp


@deftp {Abstract Object Type} mmec-unsigned-integer
@deftpx {Parent Type} mmec-integer
Base type of all the custom exact unsigned integer number types defined by this module.
@end deftp


@deftp {Abstract Object Type} mmec-floating-point
@deftpx {Parent Type} mmec-number
Base type of all the custom floating--point number types defined by this module.
@end deftp


@defun mmec-number-p @var{OBJ}
@defunx mmec-integer-p @var{OBJ}
@defunx mmec-signed-integer-p @var{OBJ}
@defunx mmec-unsigned-integer-p @var{OBJ}
@defunx mmec-floating-point-p @var{OBJ}
Return true if @var{OBJ} is an instance of the specified type; otherwise return false.
@end defun

@c page
@node ctypes typedefs char
@subsection Wrapper for @code{char}


The following syntactic bindings are defined in the module @value{PackageEmacsModule}.


@deftp {Object Type} mmec-char
@deftpx {Parent Type} mmec-signed-integer
Object wrapper for the C language type @code{char}.
@end deftp


@deffn {Generic Function} mmec-char (@var{INIT})
@deffnx {Method} mmec-char ((@var{INIT} integer))
Build and return a new instance of @objtype{mmec-char} initialised with @var{INIT}, which must be an
exact integer object in the range of the C language type @code{char}.
@end deffn


@defun mmec-char-p @var{obj}
Return true if @var{obj} is an instance of @objtype{mmec-char}, otherwise return false.
@end defun


@defun mmec-char-obj @var{CH}
Given an instance of @objtype{mmec-char}: return its internal representation as Emacs built--in
@code{integer} object representing its @ascii{} code.
@end defun

@c page
@node ctypes typedefs schar
@subsection Wrapper for @code{signed char}


The following syntactic bindings are defined in the module @value{PackageEmacsModule}.


@deftp {Object Type} mmec-schar
@deftpx {Parent Type} mmec-signed-integer
Object wrapper for the C language type @code{signed char}.
@end deftp


@deffn {Generic Function} mmec-schar (@var{INIT})
@deffnx {Method} mmec-schar ((@var{INIT} integer))
Build and return a new instance of @objtype{mmec-schar} initialised with @var{INIT}, which must be an
exact integer object in the range of the C language type @code{signed char}.
@end deffn


@defun mmec-schar-p @var{obj}
Return true if @var{obj} is an instance of @objtype{mmec-schar}, otherwise return false.
@end defun


@defun mmec-schar-obj @var{CH}
Given an instance of @objtype{mmec-schar}: return its internal representation as Emacs built--in
@code{integer} object representing its @ascii{} code.
@end defun

@c page
@node ctypes typedefs uchar
@subsection Wrapper for @code{unsigned char}


The following syntactic bindings are defined in the module @value{PackageEmacsModule}.


@deftp {Object Type} mmec-uchar
@deftpx {Parent Type} mmec-unsigned-integer
Object wrapper for the C language type @code{unsigned char}.
@end deftp


@deffn {Generic Function} mmec-uchar (@var{INIT})
@deffnx {Method} mmec-uchar ((@var{INIT} integer))
Build and return a new instance of @objtype{mmec-uchar} initialised with @var{INIT}, which must be an
exact integer object in the range of the C language type @code{unsigned char}.
@end deffn


@defun mmec-uchar-p @var{obj}
Return true if @var{obj} is an instance of @objtype{mmec-uchar}, otherwise return false.
@end defun


@defun mmec-uchar-obj @var{CH}
Given an instance of @objtype{mmec-uchar}: return its internal representation as Emacs built--in
@code{integer} object representing its @ascii{} code.
@end defun

@c page
@node ctypes typedefs wchar
@subsection Wrapper for @code{wchar_t}


The following syntactic bindings are defined in the module @value{PackageEmacsModule}.


@deftp {Object Type} mmec-wchar
@deftpx {Parent Type} mmec-unsigned-integer
Object wrapper for the C language type @code{wchar_t}.
@end deftp


@deffn {Generic Function} mmec-wchar (@var{INIT})
@deffnx {Method} mmec-wchar ((@var{INIT} integer))
Build and return a new instance of @objtype{mmec-wchar} initialised with @var{INIT}, which must be an
exact integer object in the range of the C language type @code{wchar_t}.
@end deffn


@defun mmec-wchar-p @var{obj}
Return true if @var{obj} is an instance of @objtype{mmec-wchar}, otherwise return false.
@end defun


@defun mmec-wchar-obj @var{CH}
Given an instance of @objtype{mmec-wchar}: return the exact integer representing its code.
@end defun

@c page
@node ctypes typedefs sshrt
@subsection Wrapper for @code{signed short int}


The following syntactic bindings are defined in the module @value{PackageEmacsModule}.


@deftp {Object Type} mmec-sshrt
@deftpx {Parent Type} mmec-signed-integer
Object wrapper for the C language type @code{signed short int}.
@end deftp


@deffn {Generic Function} mmec-sshrt (@var{INIT})
@deffnx {Method} mmec-sshrt ((@var{INIT} integer))
Build and return a new instance of @objtype{mmec-sshrt} initialised with @var{INIT}, which must be an
exact integer object in the range of the C language type @code{signed short int}.
@end deffn


@defun mmec-sshrt-p @var{obj}
Return true if @var{obj} is an instance of @objtype{mmec-sshrt}, otherwise return false.
@end defun


@defun mmec-sshrt-obj @var{CH}
Given an instance of @objtype{mmec-sshrt}: return its internal representation as Emacs built--in
@code{integer} object.
@end defun

@c page
@node ctypes typedefs ushrt
@subsection Wrapper for @code{unsigned short int}


The following syntactic bindings are defined in the module @value{PackageEmacsModule}.


@deftp {Object Type} mmec-ushrt
@deftpx {Parent Type} mmec-unsigned-integer
Object wrapper for the C language type @code{unsigned short int}.
@end deftp


@deffn {Generic Function} mmec-ushrt (@var{INIT})
@deffnx {Method} mmec-ushrt ((@var{INIT} integer))
Build and return a new instance of @objtype{mmec-ushrt} initialised with @var{INIT}, which must be an
exact integer object in the range of the C language type @code{unsigned short int}.
@end deffn


@defun mmec-ushrt-p @var{obj}
Return true if @var{obj} is an instance of @objtype{mmec-ushrt}, otherwise return false.
@end defun


@defun mmec-ushrt-obj @var{CH}
Given an instance of @objtype{mmec-ushrt}: return its internal representation as Emacs built--in
@code{integer} object.
@end defun

@c page
@node ctypes typedefs sint
@subsection Wrapper for @code{signed int}


The following syntactic bindings are defined in the module @value{PackageEmacsModule}.


@deftp {Object Type} mmec-sint
@deftpx {Parent Type} mmec-signed-integer
Object wrapper for the C language type @code{signed int}.
@end deftp


@deffn {Generic Function} mmec-sint (@var{INIT})
@deffnx {Method} mmec-sint ((@var{INIT} integer))
Build and return a new instance of @objtype{mmec-sint} initialised with @var{INIT}, which
must be an exact integer object in the range of the C language type @code{signed int}.
@end deffn


@defun mmec-sint-p @var{obj}
Return true if @var{obj} is an instance of @objtype{mmec-sint}, otherwise return false.
@end defun


@defun mmec-sint-obj @var{CH}
Given an instance of @objtype{mmec-sint}: return the its internal representation as
user--pointer object.
@end defun

@c page
@node ctypes typedefs uint
@subsection Wrapper for @code{unsigned int}


The following syntactic bindings are defined in the module @value{PackageEmacsModule}.


@deftp {Object Type} mmec-uint
@deftpx {Parent Type} mmec-unsigned-integer
Object wrapper for the C language type @code{unsigned int}.
@end deftp


@deffn {Generic Function} mmec-uint (@var{INIT})
@deffnx {Method} mmec-uint ((@var{INIT} integer))
Build and return a new instance of @objtype{mmec-uint} initialised with @var{INIT}, which must
be an exact integer object in the range of the C language type @code{unsigned int}.
@end deffn


@defun mmec-uint-p @var{obj}
Return true if @var{obj} is an instance of @objtype{mmec-uint}, otherwise return false.
@end defun


@defun mmec-uint-obj @var{CH}
Given an instance of @objtype{mmec-uint}: return the its internal representation as
user--pointer object.
@end defun

@c page
@node ctypes typedefs slong
@subsection Wrapper for @code{signed long int}


The following syntactic bindings are defined in the module @value{PackageEmacsModule}.


@deftp {Object Type} mmec-slong
@deftpx {Parent Type} mmec-signed-integer
Object wrapper for the C language type @code{signed long int}.
@end deftp


@deffn {Generic Function} mmec-slong (@var{INIT})
@deffnx {Method} mmec-slong ((@var{INIT} integer))
Build and return a new instance of @objtype{mmec-slong} initialised with @var{INIT}, which must be an
exact integer object in the range of the C language type @code{signed long int}.
@end deffn


@defun mmec-slong-p @var{obj}
Return true if @var{obj} is an instance of @objtype{mmec-slong}, otherwise return false.
@end defun


@defun mmec-slong-obj @var{CH}
Given an instance of @objtype{mmec-slong}: return the its internal representation as user--pointer
object.
@end defun

@c page
@node ctypes typedefs ulong
@subsection Wrapper for @code{unsigned long int}


The following syntactic bindings are defined in the module @value{PackageEmacsModule}.


@deftp {Object Type} mmec-ulong
@deftpx {Parent Type} mmec-unsigned-integer
Object wrapper for the C language type @code{unsigned long int}.
@end deftp


@deffn {Generic Function} mmec-ulong (@var{INIT})
@deffnx {Method} mmec-ulong ((@var{INIT} integer))
Build and return a new instance of @objtype{mmec-ulong} initialised with @var{INIT}, which
must be an exact integer object in the range of the C language type @code{unsigned long int}.
@end deffn


@defun mmec-ulong-p @var{obj}
Return true if @var{obj} is an instance of @objtype{mmec-ulong}, otherwise return false.
@end defun


@defun mmec-ulong-obj @var{CH}
Given an instance of @objtype{mmec-ulong}: return the its internal representation as
user--pointer object.
@end defun

@c page
@node ctypes typedefs sllong
@subsection Wrapper for @code{signed long long int}


The following syntactic bindings are defined in the module @value{PackageEmacsModule}.


@deftp {Object Type} mmec-sllong
@deftpx {Parent Type} mmec-signed-integer
Object wrapper for the C language type @code{signed long long int}.
@end deftp


@deffn {Generic Function} mmec-sllong (@var{INIT})
@deffnx {Method} mmec-sllong ((@var{INIT} integer))
Build and return a new instance of @objtype{mmec-sllong} initialised with @var{INIT},
which must be an exact integer object in the range of the C language type @code{signed long long
int}.
@end deffn


@defun mmec-sllong-p @var{obj}
Return true if @var{obj} is an instance of @objtype{mmec-sllong}, otherwise return
false.
@end defun


@defun mmec-sllong-obj @var{CH}
Given an instance of @objtype{mmec-sllong}: return the its internal representation as
user--pointer object.
@end defun

@c page
@node ctypes typedefs ullong
@subsection Wrapper for @code{unsigned long long int}


The following syntactic bindings are defined in the module @value{PackageEmacsModule}.


@deftp {Object Type} mmec-ullong
@deftpx {Parent Type} mmec-unsigned-integer
Object wrapper for the C language type @code{unsigned long long int}.
@end deftp


@deffn {Generic Function} mmec-ullong (@var{INIT})
@deffnx {Method} mmec-ullong ((@var{INIT} integer))
Build and return a new instance of @objtype{mmec-ullong} initialised with @var{INIT},
which must be an exact integer object in the range of the C language type @code{unsigned long long
int}.
@end deffn


@defun mmec-ullong-p @var{obj}
Return true if @var{obj} is an instance of @objtype{mmec-ullong}, otherwise return
false.
@end defun


@defun mmec-ullong-obj @var{CH}
Given an instance of @objtype{mmec-ullong}: return the its internal representation as
user--pointer object.
@end defun

@c page
@node ctypes typedefs ssize
@subsection Wrapper for @code{ssize_t}


The following syntactic bindings are defined in the module @value{PackageEmacsModule}.


@deftp {Object Type} mmec-ssize
@deftpx {Parent Type} mmec-signed-integer
Object wrapper for the C language type @code{ssize_t}.
@end deftp


@deffn {Generic Function} mmec-ssize (@var{INIT})
@deffnx {Method} mmec-ssize ((@var{INIT} integer))
Build and return a new instance of @objtype{mmec-ssize} initialised with @var{INIT}, which must be an
exact integer object in the range of the C language type @code{ssize_t}.
@end deffn


@defun mmec-ssize-p @var{obj}
Return true if @var{obj} is an instance of @objtype{mmec-ssize}, otherwise return false.
@end defun


@defun mmec-ssize-obj @var{CH}
Given an instance of @objtype{mmec-ssize}: return the its internal representation as user--pointer
object.
@end defun

@c page
@node ctypes typedefs usize
@subsection Wrapper for @code{size_t}


The following syntactic bindings are defined in the module @value{PackageEmacsModule}.


@deftp {Object Type} mmec-usize
@deftpx {Parent Type} mmec-unsigned-integer
Object wrapper for the C language type @code{size_t}.
@end deftp


@deffn {Generic Function} mmec-usize (@var{INIT})
@deffnx {Method} mmec-usize ((@var{INIT} integer))
Build and return a new instance of @objtype{mmec-usize} initialised with @var{INIT}, which must be an
exact integer object in the range of the C language type @code{size_t}.
@end deffn


@defun mmec-usize-p @var{obj}
Return true if @var{obj} is an instance of @objtype{mmec-usize}, otherwise return false.
@end defun


@defun mmec-usize-obj @var{CH}
Given an instance of @objtype{mmec-usize}: return the its internal representation as user--pointer
object.
@end defun

@c page
@node ctypes typedefs sintmax
@subsection Wrapper for @code{intmax_t}


The following syntactic bindings are defined in the module @value{PackageEmacsModule}.


@deftp {Object Type} mmec-sintmax
@deftpx {Parent Type} mmec-signed-integer
Object wrapper for the C language type @code{intmax_t}.
@end deftp


@deffn {Generic Function} mmec-sintmax (@var{INIT})
@deffnx {Method} mmec-sintmax ((@var{INIT} integer))
Build and return a new instance of @objtype{mmec-sintmax} initialised with @var{INIT}, which must be an
exact integer object in the range of the C language type @code{intmax_t}.
@end deffn


@defun mmec-sintmax-p @var{obj}
Return true if @var{obj} is an instance of @objtype{mmec-sintmax}, otherwise return false.
@end defun


@defun mmec-sintmax-obj @var{CH}
Given an instance of @objtype{mmec-sintmax}: return the its internal representation as user--pointer
object.
@end defun

@c page
@node ctypes typedefs uintmax
@subsection Wrapper for @code{uintmax_t}


The following syntactic bindings are defined in the module @value{PackageEmacsModule}.


@deftp {Object Type} mmec-uintmax
@deftpx {Parent Type} mmec-unsigned-integer
Object wrapper for the C language type @code{uintmax_t}.
@end deftp


@deffn {Generic Function} mmec-uintmax (@var{INIT})
@deffnx {Method} mmec-uintmax ((@var{INIT} integer))
Build and return a new instance of @objtype{mmec-uintmax} initialised with @var{INIT}, which must be
an exact integer object in the range of the C language type @code{uintmax_t}.
@end deffn


@defun mmec-uintmax-p @var{obj}
Return true if @var{obj} is an instance of @objtype{mmec-uintmax}, otherwise return false.
@end defun


@defun mmec-uintmax-obj @var{CH}
Given an instance of @objtype{mmec-uintmax}: return the its internal representation as user--pointer
object.
@end defun

@c page
@node ctypes typedefs ptrdiff
@subsection Wrapper for @code{ptrdiff_t}


The following syntactic bindings are defined in the module @value{PackageEmacsModule}.


@deftp {Object Type} mmec-ptrdiff
@deftpx {Parent Type} mmec-signed-integer
Object wrapper for the C language type @code{ptrdiff_t}.
@end deftp


@deffn {Generic Function} mmec-ptrdiff (@var{INIT})
@deffnx {Method} mmec-ptrdiff ((@var{INIT} integer))
Build and return a new instance of @objtype{mmec-ptrdiff} initialised with @var{INIT}, which must be
an exact integer object in the range of the C language type @code{ptrdiff_t}.
@end deffn


@defun mmec-ptrdiff-p @var{obj}
Return true if @var{obj} is an instance of @objtype{mmec-ptrdiff}, otherwise return false.
@end defun


@defun mmec-ptrdiff-obj @var{CH}
Given an instance of @objtype{mmec-ptrdiff}: return the its internal representation as user--pointer
object.
@end defun

@c page
@node ctypes typedefs sint8
@subsection Wrapper for @code{int8_t}


The following syntactic bindings are defined in the module @value{PackageEmacsModule}.


@deftp {Object Type} mmec-sint8
@deftpx {Parent Type} mmec-signed-integer
Object wrapper for the C language type @code{int8_t}.
@end deftp


@deffn {Generic Function} mmec-sint8 (@var{INIT})
@deffnx {Method} mmec-sint8 ((@var{INIT} integer))
Build and return a new instance of @objtype{mmec-sint8} initialised with @var{INIT}, which must be an
exact integer object in the range of the C language type @code{int8_t}.
@end deffn


@defun mmec-sint8-p @var{obj}
Return true if @var{obj} is an instance of @objtype{mmec-sint8}, otherwise return false.
@end defun


@defun mmec-sint8-obj @var{CH}
Given an instance of @objtype{mmec-sint8}: return the its internal representation as Emacs built--in
@code{integer} object.
@end defun

@c page
@node ctypes typedefs uint8
@subsection Wrapper for @code{uint8_t}


The following syntactic bindings are defined in the module @value{PackageEmacsModule}.


@deftp {Object Type} mmec-uint8
@deftpx {Parent Type} mmec-unsigned-integer
Object wrapper for the C language type @code{uint8_t}.
@end deftp


@deffn {Generic Function} mmec-uint8 (@var{INIT})
@deffnx {Method} mmec-uint8 ((@var{INIT} integer))
Build and return a new instance of @objtype{mmec-uint8} initialised with @var{INIT}, which must be an
exact integer object in the range of the C language type @code{uint8_t}.
@end deffn


@defun mmec-uint8-p @var{obj}
Return true if @var{obj} is an instance of @objtype{mmec-uint8}, otherwise return false.
@end defun


@defun mmec-uint8-obj @var{CH}
Given an instance of @objtype{mmec-uint8}: return the its internal representation as Emacs built--in
@code{integer} object.
@end defun

@c page
@node ctypes typedefs sint16
@subsection Wrapper for @code{int16_t}


The following syntactic bindings are defined in the module @value{PackageEmacsModule}.


@deftp {Object Type} mmec-sint16
@deftpx {Parent Type} mmec-signed-integer
Object wrapper for the C language type @code{int16_t}.
@end deftp


@deffn {Generic Function} mmec-sint16 (@var{INIT})
@deffnx {Method} mmec-sint16 ((@var{INIT} integer))
Build and return a new instance of @objtype{mmec-sint16} initialised with @var{INIT}, which must be an
exact integer object in the range of the C language type @code{int16_t}.
@end deffn


@defun mmec-sint16-p @var{obj}
Return true if @var{obj} is an instance of @objtype{mmec-sint16}, otherwise return false.
@end defun


@defun mmec-sint16-obj @var{CH}
Given an instance of @objtype{mmec-sint16}: return the its internal representation as Emacs built--in
@code{integer} object.
@end defun

@c page
@node ctypes typedefs uint16
@subsection Wrapper for @code{uint16_t}


The following syntactic bindings are defined in the module @value{PackageEmacsModule}.


@deftp {Object Type} mmec-uint16
@deftpx {Parent Type} mmec-unsigned-integer
Object wrapper for the C language type @code{uint16_t}.
@end deftp


@deffn {Generic Function} mmec-uint16 (@var{INIT})
@deffnx {Method} mmec-uint16 ((@var{INIT} integer))
Build and return a new instance of @objtype{mmec-uint16} initialised with @var{INIT}, which must be an
exact integer object in the range of the C language type @code{uint16_t}.
@end deffn


@defun mmec-uint16-p @var{obj}
Return true if @var{obj} is an instance of @objtype{mmec-uint16}, otherwise return false.
@end defun


@defun mmec-uint16-obj @var{CH}
Given an instance of @objtype{mmec-uint16}: return the its internal representation as Emacs built--in
@code{integer} object.
@end defun

@c page
@node ctypes typedefs sint32
@subsection Wrapper for @code{int32_t}


The following syntactic bindings are defined in the module @value{PackageEmacsModule}.


@deftp {Object Type} mmec-sint32
@deftpx {Parent Type} mmec-signed-integer
Object wrapper for the C language type @code{int32_t}.
@end deftp


@deffn {Generic Function} mmec-sint32 (@var{INIT})
@deffnx {Method} mmec-sint32 ((@var{INIT} integer))
Build and return a new instance of @objtype{mmec-sint32} initialised with @var{INIT}, which must be an
exact integer object in the range of the C language type @code{int32_t}.
@end deffn


@defun mmec-sint32-p @var{obj}
Return true if @var{obj} is an instance of @objtype{mmec-sint32}, otherwise return false.
@end defun


@defun mmec-sint32-obj @var{CH}
Given an instance of @objtype{mmec-sint32}: return the its internal representation as user--pointer
object.
@end defun

@c page
@node ctypes typedefs uint32
@subsection Wrapper for @code{uint32_t}


The following syntactic bindings are defined in the module @value{PackageEmacsModule}.


@deftp {Object Type} mmec-uint32
@deftpx {Parent Type} mmec-unsigned-integer
Object wrapper for the C language type @code{uint32_t}.
@end deftp


@deffn {Generic Function} mmec-uint32 (@var{INIT})
@deffnx {Method} mmec-uint32 ((@var{INIT} integer))
Build and return a new instance of @objtype{mmec-uint32} initialised with @var{INIT}, which must be an
exact integer object in the range of the C language type @code{uint32_t}.
@end deffn


@defun mmec-uint32-p @var{obj}
Return true if @var{obj} is an instance of @objtype{mmec-uint32}, otherwise return false.
@end defun


@defun mmec-uint32-obj @var{CH}
Given an instance of @objtype{mmec-uint32}: return the its internal representation as user--pointer
object.
@end defun

@c page
@node ctypes typedefs sint64
@subsection Wrapper for @code{int64_t}


The following syntactic bindings are defined in the module @value{PackageEmacsModule}.


@deftp {Object Type} mmec-sint64
@deftpx {Parent Type} mmec-signed-integer
Object wrapper for the C language type @code{int64_t}.
@end deftp


@deffn {Generic Function} mmec-sint64 (@var{INIT})
@deffnx {Method} mmec-sint64 ((@var{INIT} integer))
Build and return a new instance of @objtype{mmec-sint64} initialised with @var{INIT}, which must be an
exact integer object in the range of the C language type @code{int64_t}.
@end deffn


@defun mmec-sint64-p @var{obj}
Return true if @var{obj} is an instance of @objtype{mmec-sint64}, otherwise return false.
@end defun


@defun mmec-sint64-obj @var{CH}
Given an instance of @objtype{mmec-sint64}: return the its internal representation as user--pointer
object.
@end defun

@c page
@node ctypes typedefs uint64
@subsection Wrapper for @code{uint64_t}


The following syntactic bindings are defined in the module @value{PackageEmacsModule}.


@deftp {Object Type} mmec-uint64
@deftpx {Parent Type} mmec-unsigned-integer
Object wrapper for the C language type @code{uint64_t}.
@end deftp


@deffn {Generic Function} mmec-uint64 (@var{INIT})
@deffnx {Method} mmec-uint64 ((@var{INIT} integer))
Build and return a new instance of @objtype{mmec-uint64} initialised with @var{INIT}, which must be an
exact integer object in the range of the C language type @code{uint64_t}.
@end deffn


@defun mmec-uint64-p @var{obj}
Return true if @var{obj} is an instance of @objtype{mmec-uint64}, otherwise return false.
@end defun


@defun mmec-uint64-obj @var{CH}
Given an instance of @objtype{mmec-uint64}: return the its internal representation as user--pointer
object.
@end defun

@c page
@node ctypes typedefs float
@subsection Wrapper for @code{float}


The following syntactic bindings are defined in the module @value{PackageEmacsModule}.


@deftp {Object Type} mmec-float
@deftpx {Parent Type} mmec-floating-point
Object wrapper for the C language type @code{float}.
@end deftp


@deffn {Generic Function} mmec-float (@var{INIT})
@deffnx {Method} mmec-float ((@var{INIT} float))
Build and return a new instance of @objtype{mmec-float} initialised with @var{INIT}, which must be a
floating--point object in the range of the C language type @code{float}.
@end deffn


@defun mmec-float-p @var{obj}
Return true if @var{obj} is an instance of @objtype{mmec-float}, otherwise return false.
@end defun


@defun mmec-float-obj @var{CH}
Given an instance of @objtype{mmec-float}: return the its internal representation as user--pointer
object.
@end defun

@c page
@node ctypes typedefs double
@subsection Wrapper for @code{double}


The following syntactic bindings are defined in the module @value{PackageEmacsModule}.


@deftp {Object Type} mmec-double
@deftpx {Parent Type} mmec-floating-point
Object wrapper for the C language type @code{double}.
@end deftp


@deffn {Generic Function} mmec-double (@var{INIT})
@deffnx {Method} mmec-double ((@var{INIT} float))
Build and return a new instance of @objtype{mmec-double} initialised with @var{INIT}, which must be a
floating--point object in the range of the C language type @code{double}.
@end deffn


@defun mmec-double-p @var{obj}
Return true if @var{obj} is an instance of @objtype{mmec-double}, otherwise return false.
@end defun


@defun mmec-double-obj @var{CH}
Given an instance of @objtype{mmec-double}: return the its internal representation as Emacs built--in
@code{float}.
@end defun

@c page
@node ctypes typedefs ldouble
@subsection Wrapper for @code{long double}


The following syntactic bindings are defined in the module @value{PackageEmacsModule}.


@deftp {Object Type} mmec-ldouble
@deftpx {Parent Type} mmec-floating-point
Object wrapper for the C language type @code{long double}.
@end deftp


@deffn {Generic Function} mmec-ldouble (@var{INIT})
@deffnx {Method} mmec-ldouble ((@var{INIT} float))
Build and return a new instance of @objtype{mmec-ldouble} initialised with @var{INIT}, which must
be a floating--point object in the range of the C language type @code{long double}.
@end deffn


@defun mmec-ldouble-p @var{obj}
Return true if @var{obj} is an instance of @objtype{mmec-ldouble}, otherwise return false.
@end defun


@defun mmec-ldouble-obj @var{CH}
Given an instance of @objtype{mmec-ldouble}: return the its internal representation as
user--pointer object.
@end defun

@c page
@node ctypes comparison
@section Comparison operations


To perform a comparison operation among operands of different types, we normalise the operands as
follows:

@itemize
@item
We convert all the signed integers to @objtype{mmec-sint64}.

@item
We convert all the unsigned integers to @objtype{mmec-uint64}.

@item
We convert all the floating--point numbers to @objtype{mmec-ldouble}.

@item
When comparing integers and floating--point numbers we convert all the integer types to
@objtype{mmec-ldouble}.
@end itemize

@c ------------------------------------------------------------------------


@macro mmuxDefunNumericComparisonMethod{OPERATOR, TYPE1, TYPE2}
@deffn {Method} mmec-2\OPERATOR\ ((@vari{op} \TYPE1\) (@varii{op} \TYPE2\))
Return true if @vari{OP} \OPERATOR\ @varii{OP}; otherwise return false.
@end deffn

@end macro


@macro mmuxDefunNumericComparisonFunction{OPERATOR, OPERATIONDESCRIPTION}
@defun cc\OPERATOR\ @var{OP} &rest @var{ops}
Return true if all the operands are \OPERATIONDESCRIPTION\, left to right; otherwise return false.
The comparison is performed with the generic function @func{mmec-2\OPERATOR\}.
@end defun


@deffn {Generic Function} {mmec-2\OPERATOR\} (@vari{OP} @varii{OP})
Return true if @vari{OP} \OPERATOR\ @varii{OP}; otherwise return false.
@end deffn

@c These are the methods that actually do the operation on built-in numeric objects.
@mmuxDefunNumericComparisonMethod{\OPERATOR\, integer, integer}
@mmuxDefunNumericComparisonMethod{\OPERATOR\, integer, float}
@mmuxDefunNumericComparisonMethod{\OPERATOR\, float,   integer}
@mmuxDefunNumericComparisonMethod{\OPERATOR\, float,   float}

@c These are the methods that actually do the operation on custom user-pointer objects.
@mmuxDefunNumericComparisonMethod{\OPERATOR\, mmec-sint64, mmec-sint64}
@mmuxDefunNumericComparisonMethod{\OPERATOR\, mmec-uint64, mmec-uint64}
@mmuxDefunNumericComparisonMethod{\OPERATOR\, mmec-sint64, mmec-uint64}
@mmuxDefunNumericComparisonMethod{\OPERATOR\, mmec-uint64, mmec-sint64}
@mmuxDefunNumericComparisonMethod{\OPERATOR\, mmec-ldouble, mmec-ldouble}

@c These are the methods that normalise operands among operational types.
@mmuxDefunNumericComparisonMethod{\OPERATOR\, mmec-sint64, mmec-ldouble}
@mmuxDefunNumericComparisonMethod{\OPERATOR\, mmec-uint64, mmec-ldouble}
@mmuxDefunNumericComparisonMethod{\OPERATOR\, mmec-ldouble, mmec-sint64}
@mmuxDefunNumericComparisonMethod{\OPERATOR\, mmec-ldouble, mmec-uint64}

@c These are the methods that normalise among integer types.
@mmuxDefunNumericComparisonMethod{\OPERATOR\, mmec-signed-integer,   mmec-signed-integer}
@mmuxDefunNumericComparisonMethod{\OPERATOR\, mmec-unsigned-integer, mmec-unsigned-integer}
@mmuxDefunNumericComparisonMethod{\OPERATOR\, mmec-signed-integer,   mmec-unsigned-integer}
@mmuxDefunNumericComparisonMethod{\OPERATOR\, mmec-unsigned-integer, mmec-signed-integer}

@c These are the methods that normalise among floating point types.
@mmuxDefunNumericComparisonMethod{\OPERATOR\, mmec-floating-point, mmec-floating-point}

@c These are the methods that normalise mixed numeric types: `mmec-floating-point', `mmec-signed-integer', `mmec-unsigned-intger'.
@mmuxDefunNumericComparisonMethod{\OPERATOR\, mmec-floating-point,   mmec-signed-integer}
@mmuxDefunNumericComparisonMethod{\OPERATOR\, mmec-signed-integer,   mmec-floating-point}
@mmuxDefunNumericComparisonMethod{\OPERATOR\, mmec-floating-point,   mmec-unsigned-integer}
@mmuxDefunNumericComparisonMethod{\OPERATOR\, mmec-unsigned-integer, mmec-floating-point}

@c These are the methods that normalise mixed numeric types: `integer' and `mmec-floating-point'.
@mmuxDefunNumericComparisonMethod{\OPERATOR\, integer, mmec-floating-point}
@mmuxDefunNumericComparisonMethod{\OPERATOR\, mmec-floating-point, integer}

@c These are the methods that normalise mixed numeric types: `integer' and `mmec-signed-integer'.
@mmuxDefunNumericComparisonMethod{\OPERATOR\, integer, mmec-signed-integer}
@mmuxDefunNumericComparisonMethod{\OPERATOR\, mmec-signed-integer, integer}

@c These are the methods that normalise mixed numeric types: `integer' and `mmec-unsigned-integer'.
@mmuxDefunNumericComparisonMethod{\OPERATOR\, integer, mmec-unsigned-integer}
@mmuxDefunNumericComparisonMethod{\OPERATOR\, mmec-unsigned-integer, integer}

@c These are the methods that normalise mixed numeric types: `float' and `mmec-floating-point'.
@mmuxDefunNumericComparisonMethod{\OPERATOR\, float, mmec-floating-point}
@mmuxDefunNumericComparisonMethod{\OPERATOR\, mmec-floating-point, float}

@c These are the methods that normalise mixed numeric types: `float' and `mmec-signed-integer'.
@mmuxDefunNumericComparisonMethod{\OPERATOR\, float, mmec-signed-integer}
@mmuxDefunNumericComparisonMethod{\OPERATOR\, mmec-signed-integer, float}

@c These are the methods that normalise mixed numeric types: `float' and `mmec-unsigned-integer'.
@mmuxDefunNumericComparisonMethod{\OPERATOR\, float, mmec-unsigned-integer}
@mmuxDefunNumericComparisonMethod{\OPERATOR\, mmec-unsigned-integer, float}
@end macro

@c ------------------------------------------------------------------------

@menu
* ctypes comparison eq::        Equality functions.
* ctypes comparison neq::       Non-equality functions.
* ctypes comparison less::      Less than functions.
* ctypes comparison greater::   Greater than functions.
* ctypes comparison leq::       Less than or equal to functions.
* ctypes comparison geq::       Greater than or equal to functions.
@end menu

@c page
@node ctypes comparison eq
@subsection Equality functions


@mmuxDefunNumericComparisonFunction{=, one equal to the other}

@c page
@node ctypes comparison neq
@subsection Non--equality functions


@mmuxDefunNumericComparisonFunction{/=, one not equal to the other}

@c page
@node ctypes comparison less
@subsection Less than functions


@mmuxDefunNumericComparisonFunction{<, one less than the other}

@c page
@node ctypes comparison greater
@subsection Greater than functions


@mmuxDefunNumericComparisonFunction{>, one greater than the other}

@c page
@node ctypes comparison leq
@subsection Less than or equal to functions


@mmuxDefunNumericComparisonFunction{<=, one less than or equal to the other}

@c page
@node ctypes comparison geq
@subsection Greater than or equal to functions


@mmuxDefunNumericComparisonFunction{>=, one greater than or equal to the other}

@c page
@node bytevectors
@chapter Bytevector objects


@menu
* bytevectors typedefs::        Type definition.
* bytevectors pred::            Type predicates.
* bytevectors getters::         Bytevector getters.
* bytevectors setters::         Bytevector setters.
@end menu

@c page
@node bytevectors typedefs
@section Type definition


@deftp {Object Type} mmec-bytevector
Base type of bytevector objects: it can represent binary data with a C language array.  Objects of
this type are correctly garbage collected.  It has the following fields:

@table @code
@item number-of-slots
Non--negative exact integer representing the number of slots in a bytevector.

@item slot-size
Non--negative exact integer representing the size of a slot measured in bytes.

@item number-of-allocated-bytes
Non--negative exact integer representing the number of bytes allocated in the data area.

@item obj
Pointer object.
@end table
@end deftp


@deftp {Object Type} mmec-integer-bytevector
@deftpx {Parent Type} mmec-bytevector
Base type of bytevector objects holding C language integers in their slots.  Objects of this type
are correctly garbage collected.  In addition to the slots of @objtype{mmec-bytevector}, it has the
following fields:

@table @code
@item signed
Boolean, true if the data in each slot is to be interpreted as a signed integer; false if it has to
be interpreted as an unsigned integer.
@end table
@end deftp


@deftp {Object Type} mmec-float-bytevector
@deftpx {Parent Type} mmec-bytevector
Base type of bytevector objects holding C language floating--point values in their slots.  Objects
of this type are correctly garbage collected.
@end deftp

@c ------------------------------------------------------------------------

@deftp {Object Type} mmec-bytevector-u8
@deftpx {Parent Type} mmec-integer-bytevector
Type of bytevector objects holding C language integer of type @code{uint8_t} in their slots.
Objects of this type are correctly garbage collected.
@end deftp


@deftp {Object Type} mmec-bytevector-s8
@deftpx {Parent Type} mmec-integer-bytevector
Type of bytevector objects holding C language integer of type @code{int8_t} in their slots.  Objects
of this type are correctly garbage collected.
@end deftp

@c ------------------------------------------------------------------------

@deftp {Object Type} mmec-bytevector-u16
@deftpx {Parent Type} mmec-integer-bytevector
Type of bytevector objects holding C language integer of type @code{uint16_t} in their slots.
Objects of this type are correctly garbage collected.
@end deftp


@deftp {Object Type} mmec-bytevector-s16
@deftpx {Parent Type} mmec-integer-bytevector
Type of bytevector objects holding C language integer of type @code{int16_t} in their slots.
Objects of this type are correctly garbage collected.
@end deftp

@c ------------------------------------------------------------------------

@deftp {Object Type} mmec-bytevector-u32
@deftpx {Parent Type} mmec-integer-bytevector
Type of bytevector objects holding C language integer of type @code{uint32_t} in their slots.
Objects of this type are correctly garbage collected.
@end deftp


@deftp {Object Type} mmec-bytevector-s32
@deftpx {Parent Type} mmec-integer-bytevector
Type of bytevector objects holding C language integer of type @code{int32_t} in their slots.
Objects of this type are correctly garbage collected.
@end deftp

@c ------------------------------------------------------------------------

@deftp {Object Type} mmec-bytevector-u64
@deftpx {Parent Type} mmec-integer-bytevector
Type of bytevector objects holding C language integer of type @code{uint64_t} in their slots.
Objects of this type are correctly garbage collected.
@end deftp


@deftp {Object Type} mmec-bytevector-s64
@deftpx {Parent Type} mmec-integer-bytevector
Type of bytevector objects holding C language integer of type @code{int64_t} in their slots.
Objects of this type are correctly garbage collected.
@end deftp

@c ------------------------------------------------------------------------

@deftp {Object Type} mmec-bytevector-float
@deftpx {Parent Type} mmec-float-bytevector
Type of bytevector objects holding C language values of type @code{float} in their slots.  Objects
of this type are correctly garbage collected.
@end deftp


@deftp {Object Type} mmec-bytevector-double
@deftpx {Parent Type} mmec-float-bytevector
Type of bytevector objects holding C language values of type @code{double} in their slots.  Objects
of this type are correctly garbage collected.
@end deftp


@deftp {Object Type} mmec-bytevector-ldouble
@deftpx {Parent Type} mmec-float-bytevector
Type of bytevector objects holding C language values of type @code{long double} in their slots.
Objects of this type are correctly garbage collected.
@end deftp

@c page
@node bytevectors pred
@section Type predicates


@defun mmec-bytevector-p @var{OBJ}
Return true if @var{OBJ} is an instance of @objtype{mmec-bytevector}; otherwise return false.
@end defun


@defun mmec-integer-bytevector-p @var{OBJ}
Return true if @var{OBJ} is an instance of @objtype{mmec-integer-bytevector}; otherwise return false.
@end defun


@defun mmec-float-bytevector-p @var{OBJ}
Return true if @var{OBJ} is an instance of @objtype{mmec-float-bytevector}; otherwise return false.
@end defun

@c ------------------------------------------------------------------------

@defun mmec-bytevector-u8-p @var{OBJ}
Return true if @var{OBJ} is an instance of @objtype{mmec-bytevector-u8}; otherwise return false.
@end defun


@defun mmec-bytevector-s8-p @var{OBJ}
Return true if @var{OBJ} is an instance of @objtype{mmec-bytevector-s8}; otherwise return false.
@end defun

@c ------------------------------------------------------------------------

@defun mmec-bytevector-u16-p @var{OBJ}
Return true if @var{OBJ} is an instance of @objtype{mmec-bytevector-u16}; otherwise return false.
@end defun


@defun mmec-bytevector-s16-p @var{OBJ}
Return true if @var{OBJ} is an instance of @objtype{mmec-bytevector-s16}; otherwise return false.
@end defun

@c ------------------------------------------------------------------------

@defun mmec-bytevector-u32-p @var{OBJ}
Return true if @var{OBJ} is an instance of @objtype{mmec-bytevector-u32}; otherwise return false.
@end defun


@defun mmec-bytevector-s32-p @var{OBJ}
Return true if @var{OBJ} is an instance of @objtype{mmec-bytevector-s32}; otherwise return false.
@end defun

@c ------------------------------------------------------------------------

@defun mmec-bytevector-u64-p @var{OBJ}
Return true if @var{OBJ} is an instance of @objtype{mmec-bytevector-u64}; otherwise return false.
@end defun


@defun mmec-bytevector-s64-p @var{OBJ}
Return true if @var{OBJ} is an instance of @objtype{mmec-bytevector-s64}; otherwise return false.
@end defun

@c ------------------------------------------------------------------------

@defun mmec-bytevector-float-p @var{OBJ}
Return true if @var{OBJ} is an instance of @objtype{mmec-bytevector-float}; otherwise return false.
@end defun


@defun mmec-bytevector-double-p @var{OBJ}
Return true if @var{OBJ} is an instance of @objtype{mmec-bytevector-double}; otherwise return false.
@end defun


@defun mmec-bytevector-ldouble-p @var{OBJ}
Return true if @var{OBJ} is an instance of @objtype{mmec-bytevector-ldouble}; otherwise return
false.
@end defun

@c page
@node bytevectors getters
@section Bytevector getters


@deffn {Generic Function} mmec-bytevector-ref (@var{BV} @var{IDX})
Extract the value at index @var{IDX} from the bytevector @var{BV}.
@end deffn


@deffn {Method} mmec-bytevector-ref ((@var{BV} mmec-bytevector-u8) (@var{IDX} mmec-usize))
Extract an @code{uint8_t} value from a bytevector and wrap it into a @objtype{mmec-uint8} object.
@end deffn


@deffn {Method} mmec-bytevector-ref ((@var{BV} mmec-bytevector-s8) (@var{IDX} mmec-usize))
Extract an @code{int8_t} value from a bytevector and wrap it into a @objtype{mmec-sint8} object.
@end deffn


@deffn {Method} mmec-bytevector-ref ((@var{BV} mmec-bytevector-u16) (@var{IDX} mmec-usize))
Extract an @code{uint16_t} value from a bytevector and wrap it into a @objtype{mmec-uin1t16} object.
@end deffn


@deffn {Method} mmec-bytevector-ref ((@var{BV} mmec-bytevector-s16) (@var{IDX} mmec-usize))
Extract an @code{int16_t} value from a bytevector and wrap it into a @objtype{mmec-sint16} object.
@end deffn


@deffn {Method} mmec-bytevector-ref ((@var{BV} mmec-bytevector-u32) (@var{IDX} mmec-usize))
Extract an @code{uint32_t} value from a bytevector and wrap it into a @objtype{mmec-uint32} object.
@end deffn


@deffn {Method} mmec-bytevector-ref ((@var{BV} mmec-bytevector-s32) (@var{IDX} mmec-usize))
Extract an @code{int32_t} value from a bytevector and wrap it into a @objtype{mmec-sint32} object.
@end deffn


@deffn {Method} mmec-bytevector-ref ((@var{BV} mmec-bytevector-u64) (@var{IDX} mmec-usize))
Extract an @code{uint64_t} value from a bytevector and wrap it into a @objtype{mmec-uint64} object.
@end deffn


@deffn {Method} mmec-bytevector-ref ((@var{BV} mmec-bytevector-s64) (@var{IDX} mmec-usize))
Extract an @code{int64_t} value from a bytevector and wrap it into a @objtype{mmec-sint64} object.
@end deffn

@c page
@node bytevectors setters
@section Bytevector setters


@deffn {Generic Function} mmec-bytevector-set! (bv idx val)
Store the value @var{VAL} into the bytevector @var{BV} at index @var{idx}.
@end deffn


@deffn {Method} mmec-bytevector-set! ((@var{BV} mmec-bytevector-u8) (@var{IDX} mmec-usize) (@var{VAL} mmec-uint8))
Store the value @var{VAL} of type @code{uint8_t} into the bytevector @var{BV} at index @var{IDX}.
@end deffn


@deffn {Method} mmec-bytevector-set! ((@var{BV} mmec-bytevector-s8) (@var{IDX} mmec-usize) (@var{VAL} mmec-sint8))
Store the value @var{VAL} of type @code{int8_t} into the bytevector @var{BV} at index @var{IDX}.
@end deffn


@deffn {Method} mmec-bytevector-set! ((@var{BV} mmec-bytevector-u16) (@var{IDX} mmec-usize) (@var{VAL} mmec-uint16))
Store the value @var{VAL} of type @code{uint16_t} into the bytevector @var{BV} at index @var{IDX}.
@end deffn


@deffn {Method} mmec-bytevector-set! ((@var{BV} mmec-bytevector-s16) (@var{IDX} mmec-usize) (@var{VAL} mmec-sint16))
Store the value @var{VAL} of type @code{int16_t} into the bytevector @var{BV} at index @var{IDX}.
@end deffn


@deffn {Method} mmec-bytevector-set! ((@var{BV} mmec-bytevector-u32) (@var{IDX} mmec-usize) (@var{VAL} mmec-uint32))
Store the value @var{VAL} of type @code{uint32_t} into the bytevector @var{BV} at index @var{IDX}.
@end deffn


@deffn {Method} mmec-bytevector-set! ((@var{BV} mmec-bytevector-s32) (@var{IDX} mmec-usize) (@var{VAL} mmec-sint32))
Store the value @var{VAL} of type @code{int32_t} into the bytevector @var{BV} at index @var{IDX}.
@end deffn


@deffn {Method} mmec-bytevector-set! ((@var{BV} mmec-bytevector-u64) (@var{IDX} mmec-usize) (@var{VAL} mmec-uint64))
Store the value @var{VAL} of type @code{uint64_t} into the bytevector @var{BV} at index @var{IDX}.
@end deffn


@deffn {Method} mmec-bytevector-set! ((@var{BV} mmec-bytevector-s64) (@var{IDX} mmec-usize) (@var{VAL} mmec-sint64))
Store the value @var{VAL} of type @code{int64_t} into the bytevector @var{BV} at index @var{IDX}.
@end deffn

@c page
@node errors
@chapter How errors are signalled


Occasionally the functions in @value{PACKAGE} signal an error; the following error symbols are
defined.


@defvr {Error Symbol} mmec-error
The base type of all the error symbols.
@end defvr


@menu
* errors constructor::          Constructor errors.
* errors range::                Range errors.
* errors operations::           Operation errors.
@end menu

@c page
@node errors constructor
@section Constructor errors


@defvr {Error Symbol} mmec-error-constructor
@defvrx {Parent Error Symbol} mmec-error
An error occurred while constructing an object.
@end defvr


@defvr {Error Symbol} mmec-error-no-memory
@defvrx {Parent Error Symbol} mmec-error-constructor
Used to signal that there was not enough memory to allocate an object.
@end defvr


@defvr {Error Symbol} mmec-error-instantiating-abstract-type
@defvrx {Parent Error Symbol} mmec-error-constructor
An attempt was performed to instantiate an abstract data type.
@end defvr


@defvr {Error Symbol} mmec-error-unsupported-init-type
@defvrx {Parent Error Symbol} mmec-error-constructor
An argument given to an object constructor has an unsupported type.
@end defvr

@c page
@node errors range
@section Range errors


@defvr {Error Symbol} mmec-error-value-out-of-range
@defvrx {Parent Error Symbol} mmec-error
A numeric object is out of range.
@end defvr


@defvr {Error Symbol} mmec-error-index-out-of-range
@defvrx {Parent Error Symbol} mmec-error-value-out-of-range
Used to signal an attempt to access the internal represenation of an object with an index out of
range.
@end defvr


@defvr {Error Symbol} mmec-error-bytevector-index-out-of-range
@defvrx {Parent Error Symbol} mmec-error-index-out-of-range
Attempt to access the internal represenation of a bytevector object with an index out of range.
@end defvr

@c page
@node errors operations
@section Operation errors


@defvr {Error Symbol} mmec-error-signed/unsigned-integer-comparison
@defvrx {Parent Error Symbol} mmec-error
Cannot compare a signed integer with an unsigned integer.
@end defvr

@c page
@node capi
@chapter C language programming interface


@menu
* capi version::                Version informations.
* capi typedefs::               General type definitions.
* capi errors::                 Signalling errors.
* capi modules::                Modules related definitions.
* capi objects::                Handling Emacs Lisp objects.
@end menu

@c page
@node capi version
@section Version informations


The installed libraries follow version numbering as established by the @gnu{} Autotools.  For an
explanation of interface numbers as managed by @gnu{} Libtool @xref{Libtool versioning, interface,
Libtool's versioning system, libtool, Shared library support for @gnu{}}.


@deftypefun {char const *} mmec_version_string (void)
Return a pointer to a statically allocated @asciiz{} string representing the interface version
number.
@end deftypefun


@deftypefun int mmec_version_interface_current (void)
Return an integer representing the library interface current number.
@end deftypefun


@deftypefun int mmec_version_interface_revision (void)
Return an integer representing the library interface current revision number.
@end deftypefun


@deftypefun int mmec_version_interface_age (void)
Return an integer representing the library interface current age.
@end deftypefun

@c page
@node capi typedefs
@section General type definitions


@menu
* capi typedefs clang::         C language type definitions.
@end menu

@c page
@node capi typedefs clang
@subsection C language type definitions


The following type definitions are useful when defining macros: every type name has the C language
specification in a single word, so we can build macro expansions with:

@example
#undef  THE_TYPE
#define THE_TYPE(STEM)          mmec_clang_ ## STEM ## _t

THE_TYPE(char)
THE_TYPE(sshrt)
THE_TYPE(ullong)
@end example


@deftp {Type definition} mmec_clang_char_t
An alias for the C language type @code{char}.
@end deftp


@deftp {Type definition} mmec_clang_schar_t
An alias for the C language type @code{signed char}.
@end deftp


@deftp {Type definition} mmec_clang_uchar_t
An alias for the C language type @code{unsigned char}.
@end deftp


@deftp {Type definition} mmec_clang_wchar_t
An alias for the C language type @code{wchar_t}.
@end deftp


@deftp {Type definition} mmec_clang_sshrt_t
An alias for the C language type @code{signed   short int}.
@end deftp


@deftp {Type definition} mmec_clang_ushrt_t
An alias for the C language type @code{unsigned short int}.
@end deftp


@deftp {Type definition} mmec_clang_sint_t
An alias for the C language type @code{signed   int}.
@end deftp


@deftp {Type definition} mmec_clang_uint_t
An alias for the C language type @code{unsigned int}.
@end deftp


@deftp {Type definition} mmec_clang_slong_t
An alias for the C language type @code{signed   long int}.
@end deftp


@deftp {Type definition} mmec_clang_ulong_t
An alias for the C language type @code{unsigned long int}.
@end deftp


@deftp {Type definition} mmec_clang_sllong_t
An alias for the C language type @code{signed   long long int}.
@end deftp


@deftp {Type definition} mmec_clang_ullong_t
An alias for the C language type @code{unsigned long long int}.
@end deftp


@deftp {Type definition} mmec_clang_ssize_t
An alias for the C language type @code{ssize_t}.
@end deftp


@deftp {Type definition} mmec_clang_usize_t
An alias for the C language type @code{size_t}.
@end deftp


@deftp {Type definition} mmec_clang_sintmax_t
An alias for the C language type @code{intmax_t}.
@end deftp


@deftp {Type definition} mmec_clang_uintmax_t
An alias for the C language type @code{uintmax_t}.
@end deftp


@deftp {Type definition} mmec_clang_ptrdiff_t
An alias for the C language type @code{ptrdiff_t}.
@end deftp


@deftp {Type definition} mmec_clang_sint8_t
An alias for the C language type @code{int8_t}.
@end deftp


@deftp {Type definition} mmec_clang_uint8_t
An alias for the C language type @code{uint8_t}.
@end deftp


@deftp {Type definition} mmec_clang_sint16_t
An alias for the C language type @code{int16_t}.
@end deftp


@deftp {Type definition} mmec_clang_uint16_t
An alias for the C language type @code{uint16_t}.
@end deftp


@deftp {Type definition} mmec_clang_sint32_t
An alias for the C language type @code{int32_t}.
@end deftp


@deftp {Type definition} mmec_clang_uint32_t
An alias for the C language type @code{uint32_t}.
@end deftp


@deftp {Type definition} mmec_clang_sint64_t
An alias for the C language type @code{int64_t}.
@end deftp


@deftp {Type definition} mmec_clang_uint64_t
An alias for the C language type @code{uint64_t}.
@end deftp


@deftp {Type definition} mmec_clang_float_t
An alias for the C language type @code{float}.
@end deftp


@deftp {Type definition} mmec_clang_double_t
An alias for the C language type @code{double}.
@end deftp


@deftp {Type definition} mmec_clang_ldouble_t
An alias for the C language type @code{long double}.
@end deftp

@c page
@node capi errors
@section Signalling errors


@menu
* capi errors typedefs::        Error signalling type definitions.
* capi errors macros::          Error signalling preprocessor macros.
* capi errors base::            Signalling base errors.
* capi errors constructor::     Signalling constructor errors.
* capi errors range::           Signalling range errors.
* capi errors operations::      Signalling operation errors.
@end menu

@c page
@node capi errors typedefs
@subsection Error signalling type definitions


@deftypefn {Function Protoype} emacs_value mmec_error_signaller_fun_t (emacs_env * @var{env})
Prototype of functions signalling an error.
@end deftypefn

@c page
@node capi errors macros
@subsection Error signalling preprocessor macros


@defmac MMEC_DEFINE_ERROR_SIGNALLER (@var{PREFIX}, @var{NAME}, @var{SYMBOL}, @var{MESSAGE})
Expand into the definition of an error signalling function.  The expansion is:

@example
emacs_value
PREFIX ## _error_ ## NAME (emacs_env * env)
@{
  char const   *errmsg = MESSAGE;
  emacs_value  Serrmsg = \
    mmec_new_emacs_string(env, errmsg, strlen(errmsg));

  env->non_local_exit_signal(env,
    env->intern(env, SYMBOL), Serrmsg);
  return env->intern(env, "nil");
@}
@end example

We could define an error signaller function with prototype:

@example
mmec_error_signaller_fun_t mmec_error_memory_allocation;
@end example

@noindent
as:

@example
MMEC_DEFINE_ERROR_SIGNALLER(mmec, memory_alloction,
  "mmec-error-no-memory",
  "Not enough memory available to allocate an object.")
@end example
@end defmac

@c page
@node capi errors base
@subsection Signalling base errors


@deftypefun emacs_value mmec_error_base (emacs_env * @var{env})
Signal an error with error symbol @code{mmec-error} then return @nil{}.
@end deftypefun

@c page
@node capi errors constructor
@subsection Signalling constructor errors


@deftypefun emacs_value mmec_error_constructor (emacs_env * @var{env})
Signal an error with symbol @code{mmec-error-constructor} then return @nil{}.
@end deftypefun


@deftypefun emacs_value mmec_error_memory_allocation (emacs_env * @var{env})
Signal an error with symbol @code{mmec-error-no-memory} then return @nil{}.
@end deftypefun


@deftypefun emacs_value mmec_error_instantiating_abstract_type (emacs_env * @var{env})
Signal an error with symbol @code{mmec-error-instantiating-abstract-type} then return @nil{}.
@end deftypefun


@deftypefun emacs_value mmec_error_unsupported_init_type (emacs_env * @var{env})
Signal an error with symbol @code{mmec-error-unsupported-init-type} then return @nil{}.
@end deftypefun

@c page
@node capi errors range
@subsection Signalling range errors


@deftypefun emacs_value mmec_error_value_out_of_range (emacs_env * @var{env})
Signal an error with symbol @code{mmec-error-value-out-of-range} then return @nil{}.
@end deftypefun


@deftypefun emacs_value mmec_error_index_out_of_range (emacs_env * @var{env})
Signal an error with symbol @code{mmec-error-index-out-of-range} then return @nil{}.
@end deftypefun


@deftypefun emacs_value mmec_error_bytevector_index_out_of_range (emacs_env * @var{env})
Signal an error with symbol @code{mmec-error-bytevector-index-out-of-range} then return @nil{}.
@end deftypefun

@c page
@node capi errors operations
@subsection Signalling operation errors


@deftypefun emacs_value mmec_error_signed_unsigned_integer_comparison (emacs_env * @var{env})
Signal an error with symbol @code{mmec-error-signed/unsigned-integer-comparison} then return @nil{}.
@end deftypefun

@c page
@node capi modules
@section Modules related definitions


Here is an example of how we can define Emacs Lisp functions at the C language level using the
facilities of @value{PACKAGE}:

@example
static emacs_value
Fspiffy_function (emacs_env *env, ptrdiff_t nargs,
                  emacs_value args[], void * data)
@{
  assert(0 == nargs);
  return mmec_new_elisp_nil(env);
@}

#define NUMBER_OF_MODULE_FUNCTIONS      1
static mmec_module_function_t const \
   module_functions_table[NUMBER_OF_MODULE_FUNCTIONS] = @{
  @{
    .name               = "spiffy-function",
    .implementation     = Fspiffy_function,
    .min_arity          = 0,
    .max_arity          = 0,
    .documentation      = "Do something spiffy."
  @}
@}

void
init_spiffy_module (emacs_env * env)
@{
  mmec_define_elisp_functions_from_table(env,
    module_functions_table, NUMBER_OF_MODULE_FUNCTIONS, 0);
@}
@end example


@deftypefn {Function Prototype} emacs_value mmec_elisp_function_implementation_t (emacs_env * @var{env}, ptrdiff_t @var{nargs}, emacs_value @var{args}[], void * @var{data})
Prototype of Emacs Lisp functions defined at the C language level.
@end deftypefn


@deftp {Struct Typedef} mmec_module_function_t
Structure type representing an Emacs Lisp function definition at the C language level.  Instances of
this type area meant to be defined in a an array and used to initialise a module.

@table @code
@item char const * name
Pointer to an @asciiz{} representing the name of the Emacs Lisp function.

@item mmec_elisp_function_implementation_t * implementation
Pointer to the C language function implementing the Emacs Lisp function.

@item ptrdiff_t min_arity
Minimum number of arguments accepted by the Emacs Lisp function.  It is the minimum number of items
in the array @var{args} of the functions with type @objtype{mmec_elisp_function_implementation_t}.

@item ptrdiff_t max_arity
Maximum number of arguments accepted by the Emacs Lisp function.  It is the maximum number of items
in the array @var{args} of the functions with type @objtype{mmec_elisp_function_implementation_t}.

@item char const * documentation
Pointer to an @asciiz{} representing the documentation of the Emacs Lisp function.
@end table
@end deftp


@deftypefun void mmec_define_elisp_functions_from_table (emacs_env * @var{env}, mmec_module_function_t const * @var{module_functions}, int @var{number_of_module_functions}, int @var{verbose})
Define a number of Emacs Lisp functions at the C language level.

The argument @var{env} must be the environment in which the functions will be defined.

The argument @var{module_functions} must be a pointer to an array of Emacs Lisp function
definitions.

The argument @var{number_of_module_functions} must be the number of items in the array referenced by
@var{module_functions}.

If the argument @var{verbose} is true: for every defined function, a string representing the
function name is printed to @code{stderr}, terminated by a newline; otherwise nothing is printed.
@end deftypefun

@c page
@node capi objects
@section Handling Emacs Lisp objects


@menu
* capi objects elisp::          Handling Emacs built-in values.
* capi objects usrptr::         Defining user-pointer objects.
* capi objects clang::          Wrappers for C language values.
@end menu

@c page
@node capi objects elisp
@subsection Handling Emacs built--in values


@menu
* capi objects elisp getters::  Retrieving values from Emacs built-in values.
* capi objects elisp makers::   Making new Emacs built-in values.
@end menu

@c page
@node capi objects elisp getters
@subsubsection Retrieving values from Emacs built--in values


@deftypefun {void *} mmec_get_usrptr_object_from_emacs_value (emacs_env * @var{env}, emacs_value @var{arg})
Given an Emacs Lisp value @var{arg} in the context of the environment @var{env}: get from it a
pointer to a user--pointer object; return the pointer.  The returned value is the internal
representation of @var{arg}, so if we mutate it we will mutate the value @var{arg} itself.

If @var{arg} is not a user--pointer object: the @code{wrong-type-argument} error condition is
raised.
@end deftypefun


@deftypefun intmax_t mmec_extract_elisp_integer_from_emacs_value (emacs_env * @var{env}, emacs_value @var{arg})
Given an Emacs Lisp value @var{arg} in the context of the environment @var{env}: extract from it an
exact integer number; return the number.  The returned value is independent from the internal
representation of @var{arg}.

If @var{arg} is not an exact integer value: the @code{wrong-type-argument} error condition is
raised.
@end deftypefun


@deftypefun double mmec_extract_elisp_float_from_emacs_value (emacs_env * @var{env}, emacs_value @var{arg})
Given an Emacs Lisp value @var{arg} in the context of the environment @var{env}: extract from it a
double--precision floating point number; return the number.  The returned value is independent from
the internal representation of @var{arg}.

If @var{arg} is not an exact integer value: the @code{wrong-type-argument} error condition is
raised.
@end deftypefun

@c page
@node capi objects elisp makers
@subsubsection Making new Emacs built--in values


@deftypefun emacs_value mmec_new_emacs_value_from_usrptr_object (emacs_env * @var{env}, mmec_usrptr_object_finalizer_t @var{finalizer}, void * @var{ptr})
@anchor{mmec_new_emacs_value_from_usrptr_object}
Build and return a new Emacs built--in value from the raw pointer of a user--pointer object
@var{ptr} in the context of the environment @var{env}.  The argument @var{finalizer} must be a
pointer to the user--pointer object destructor.
@end deftypefun


@deftypefun emacs_value mmec_new_emacs_value_nil (emacs_env * @var{env})
Build and return an Emacs built--in value representing the interned symbol @code{nil}, in the
context of the environment @var{env}.
@end deftypefun


@deftypefun emacs_value mmec_new_emacs_value_true (emacs_env * @var{env})
Build and return an Emacs built--in value representing the interned symbol @code{t}, in the context
of the environment @var{env}.
@end deftypefun


@deftypefun emacs_value mmec_new_emacs_value_boolean (emacs_env * @var{env}, int @var{val})
Build and return an Emacs built--in value representing either the interned symbol @code{nil} (if
@var{val} is zero) or the interned symbol @code{t} (if @var{val} is non--zero), in the context of
the environment @var{env}.
@end deftypefun


@deftypefun emacs_value mmec_new_emacs_value_integer (emacs_env * @var{env}, intmax_t @var{val})
Build and return an Emacs built--in value representing the exact integer @var{val}, in the context
of the environment @var{env}.
@end deftypefun


@deftypefun emacs_value mmec_new_emacs_value_float (emacs_env * @var{env}, double @var{val})
Build and return an Emacs built--in value representing the double--precision floating point number
@var{val}, in the context of the environment @var{env}.
@end deftypefun


@deftypefun emacs_value mmec_new_emacs_value_string (emacs_env * @var{env}, char const * @var{ptr}, size_t @var{len})
Build and return an Emacs built--in value representing the @ascii{} string referenced by @var{ptr},
of length @var{len}, in the context of the environment @var{env}.  The C language string is
duplicated in the internal representation of the returned value.
@end deftypefun

@c page
@node capi objects usrptr
@subsection Defining user--pointer objects


@deftypefn {Function Prototype} void mmec_usrptr_object_finalizer_func_t (void * @var{ptr})
Prototype of C language functions usable as user--pointer object destructors.
@end deftypefn


@deftp {Pointer Typedef} mmec_usrptr_object_finalizer_t
Type of pointers to C language functions usable as user--pointer object destructors.  We can use
values of this type as arguments in calls to @cfunc{mmec_new_emacs_value_from_usrptr_object},
@ref{mmec_new_emacs_value_from_usrptr_object}.
@end deftp

@c page
@node capi objects clang
@subsection Wrappers for C language values


@value{PACKAGE} defines a custom value type for every standard C language type we might need when
interfacing with a foreign C language library.  At the Emacs lisp level: these values are
represented by instances of a structure type defined with @func{cl-defstruct}, every structure holds
an Emacs Lisp value as internal representation:

@itemize
@item
Exact integer values that fit into an Emacs built--in @objtype{integer} value have @objtype{integer}
values as internal representation.

@item
Exact integer values that do not fit into an Emacs built--in @objtype{integer} value have a
user--pointer object value as internal representation.

@item
Floating--point values of type @code{double} have Emacs built--in @objtype{float} values as internal
representation.

@item
Floating--point values of type @code{float} and @code{long double} have a user--pointer object value
as internal representation.

@end itemize

At the C language level:

@itemize
@item
Exact integer values that fit into an Emacs built--in @objtype{integer} value have @code{intmax_t}
values as internal representation and we can cast such values to the specific C language type.

@item
Exact integer values that do not fit into an Emacs built--in @objtype{integer} value have a C
language structure as internal representation, with memory dynamically allocated.

@item
Floating--point values of type @code{double} have @code{double} values as internal representation.

@item
Floating--point values of type @code{float} and @code{long double} have a C language structure as
internal representation, with memory dynamically allocated.
@end itemize

@c ------------------------------------------------------------------------

@macro DocumentNumberValueWithIntegerRep{STEM, CTYPE}
@node capi objects clang \STEM\
@subsubsection Wrapper of @code{\CTYPE\}


@deftp {Type Definition} mmec_intrep_\STEM\_t
Type of internal representation for objects wrapping a C language value of type @code{\CTYPE\}.  It
is an alias for @code{intmax_t}.
@end deftp

@subsubheading Extractors

@deftypefun mmec_intrep_\STEM\_t mmec_extract_intrep_\STEM\_from_emacs_value (emacs_env * @var{ENV}, emacs_value @var{ARG})
Given the Emacs value @var{ARG}, in the context of the environment @var{ENV}: extract its internal
representation wrapping the C language value; return the representation itself.  The returned value
is independent from @var{ARG}.

If @var{ARG} is not an Emacs built--in value of type @objtype{integer}: the
@code{wrong-type-argument} error condition is raised.
@end deftypefun


@deftypefun mmec_clang_\STEM\_t mmec_extract_clang_\STEM\_from_emacs_value (emacs_env * @var{ENV}, emacs_value @var{ARG})
Given the Emacs value @var{ARG}, in the context of the environment @var{ENV}: extract from its
representation the raw C language value; return the raw value itself.  The returned value is
independent from @var{ARG}.

If @var{ARG} is not an Emacs built--in value of type @objtype{integer}: the
@code{wrong-type-argument} error condition is raised.
@end deftypefun


@deftypefun mmec_clang_\STEM\_t mmec_extract_clang_\STEM\_from_intrep_\STEM\ (mmec_intrep_\STEM\_t @var{IREP})
Given the internal representation of a wrapper for the C language type @code{\CTYPE\}, extract and
return its value as raw C language value.  The returned value is independent from @var{IREP}.
@end deftypefun

@subsubheading Constructors

@deftypefun mmec_intrep_\STEM\_t mmec_new_intrep_\STEM\_from_clang_\STEM\ (mmec_clang_\STEM\_t @var{VAL})
Given the raw C language value @var{VAL} wrap it into its internal representation and return the
result.  The returned value is independent from @var{VAL}.
@end deftypefun


@deftypefun emacs_value mmec_new_emacs_value_from_intrep_\STEM\ (emacs_env * @var{ENV}, mmec_intrep_\STEM\_t @var{IREP})
Given the internal representation @var{IREP} of a C language value: build and return a new Emacs
value, in the context of the environment @var{ENV}, representing the C language value.  The returned
object is independent from @var{IREP}.
@end deftypefun


@deftypefun emacs_value mmec_new_emacs_value_from_clang_\STEM\ (emacs_env * @var{ENV}, mmec_clang_\STEM\_t @var{VAL})
Given a raw C language value @var{VAL}: build and return a new Emacs value, in the context of the
environment @var{ENV}, representing the value.  The returned object is independent from @var{VAL}.
@end deftypefun
@end macro

@c ------------------------------------------------------------------------

@macro DocumentNumberValueWithFloatRep{STEM, CTYPE}
@node capi objects clang \STEM\
@subsubsection Wrapper of @code{\CTYPE\}


@deftp {Type Definition} mmec_intrep_\STEM\_t
Type of internal representation for objects wrapping a C language value of type @code{\CTYPE\}.  It
is an alias for @code{double}.
@end deftp

@subsubheading Extractors

@deftypefun mmec_intrep_\STEM\_t mmec_extract_intrep_\STEM\_from_emacs_value (emacs_env * @var{ENV}, emacs_value @var{ARG})
Given the Emacs value @var{ARG}, in the context of the environment @var{ENV}: extract its internal
representation wrapping the C language value; return the representation itself.  The returned value
is independent from @var{ARG}.

If @var{ARG} is not an Emacs built--in value of type @objtype{float}: the @code{wrong-type-argument}
error condition is raised.
@end deftypefun


@deftypefun mmec_clang_\STEM\_t mmec_extract_clang_\STEM\_from_emacs_value (emacs_env * @var{ENV}, emacs_value @var{ARG})
Given the Emacs value @var{ARG}, in the context of the environment @var{ENV}: extract from its
internal representation the raw C language value; return the raw value itself.  The returned value
is independent from the Emacs value @var{ARG}.

If @var{ARG} is not an Emacs built--in value of type @objtype{float}: the @code{wrong-type-argument}
error condition is raised.
@end deftypefun


@deftypefun mmec_clang_\STEM\_t mmec_extract_clang_\STEM\_from_intrep_\STEM\ (mmec_intrep_\STEM\_t @var{IREP})
Given the internal representation of a wrapper for the C language type @code{\CTYPE\}, extract and
return its value as raw C language value.
@end deftypefun

@subsubheading Constructors

@deftypefun mmec_intrep_\STEM\_t mmec_new_intrep_\STEM\_from_clang_\STEM\ (mmec_clang_\STEM\_t @var{VAL})
Given the raw C language value @var{VAL} wrap it into its internal representation and return the
result.  The returned value is independent from @var{VAL}.
@end deftypefun


@deftypefun emacs_value mmec_new_emacs_value_from_intrep_\STEM\ (emacs_env * @var{ENV}, mmec_intrep_\STEM\_t @var{VAL})
Given the internal representation @var{VAL} of a C language value: build and return a new Emacs
value, in the context of the environment @var{ENV}, representing the C language value itself.  The
returned object is independent from @var{VAL}.
@end deftypefun


@deftypefun emacs_value mmec_new_emacs_value_from_clang_\STEM\ (emacs_env * @var{ENV}, mmec_clang_\STEM\_t @var{VAL})
Given a raw C language value: build and return a new Emacs value, in the context of the environment
@var{ENV}, representing the raw value itself.  The returned object is independent from @var{VAL}.
@end deftypefun
@end macro

@c ------------------------------------------------------------------------

@macro DocumentNumberValueWithUsrptrRep{STEM, CTYPE}
@node capi objects clang \STEM\
@subsubsection Wrapper of @code{\CTYPE\}

@deftp {Struct Pointer} mmec_intrep_\STEM\_t
Type of internal representation for objects wrapping a C language value of type @code{\CTYPE\} and
using a user--pointer object as internal representation.
@end deftp

@subsubheading Extractors

@deftypefun mmec_intrep_\STEM\_t mmec_get_intrep_\STEM\_from_emacs_value (emacs_env * @var{ENV}, emacs_value @var{ARG})
Given the Emacs value @var{ARG}, in the context of the environment @var{ENV}: retrieve its internal
representation wrapping the C language value; return the representation.  The returned value is
still dependent from @var{ARG}: if we mutate it, we will mutate the original Emacs value.

If @var{ARG} is not an Emacs user--pointer object: the @code{wrong-type-argument} error condition is
raised.  At the C language level: there is no way to validate @var{ARG} as having an object of type
@objtype{mmec_intrep_\STEM\_t} as internal representation, rather than some other user--pointer
object type.
@end deftypefun


@deftypefun mmec_clang_\STEM\_t mmec_extract_clang_\STEM\_from_emacs_value (emacs_env * @var{ENV}, emacs_value @var{ARG})
Given the Emacs value @var{ARG}, in the context of the environment @var{ENV}: extract from it its
representation the raw C language value; return the value.  The returned value is independent from
the Emacs value @var{ARG}.

If @var{ARG} is not an Emacs user--pointer value: the @code{wrong-type-argument} error condition is
raised.  At the C language level: there is no way to validate @var{ARG} as having an object of type
@objtype{mmec_intrep_\STEM\_t} as internal representation, rather than some other user--pointer
object type.
@end deftypefun


@deftypefun mmec_clang_\STEM\_t mmec_extract_clang_\STEM\_from_intrep_\STEM\ (mmec_intrep_\STEM\_t @var{IREP})
Given the internal representation of a wrapper for the C language type @code{\CTYPE\}, extract and
return its value as raw C language value.  The returned value is independent from the internal
representation @var{IREP}.
@end deftypefun

@subsubheading Constructors

@deftypefun mmec_intrep_\STEM\_t mmec_new_intrep_\STEM\_from_clang_\STEM\ (mmec_clang_\STEM\_t @var{VAL})
Given the raw C language value @var{VAL} wrap it into its internal representation and return the
result.  The returned value is independent from @var{VAL}.

If an error occurs building the internal representation: an error is signalled and the return value
is @cnull{}.
@end deftypefun


@deftypefun emacs_value mmec_new_emacs_value_from_intrep_\STEM\ (emacs_env * @var{ENV}, mmec_intrep_\STEM\_t @var{IREP})
Given the internal representation @var{VAL} of a C language value: build and return a new Emacs
value, in the context of the environment @var{ENV}, representing the C language value.  The returned
object references @var{IREP} itself.
@end deftypefun


@deftypefun emacs_value mmec_new_emacs_value_from_clang_\STEM\ (emacs_env * @var{ENV}, mmec_clang_\STEM\_t @var{VAL})
Given a raw C language value: build and return a new Emacs value, in the context of the environment
@var{ENV}, representing the C language value itself.  The returned object is independent from
@var{VAL}.

If an error occurs building the internal representation: an error is signalled and the return value
is @nil{}.
@end deftypefun
@end macro

@c ------------------------------------------------------------------------

@menu
* capi objects clang char::     Wrapper of @code{char}.
* capi objects clang schar::    Wrapper of @code{signed char}.
* capi objects clang uchar::    Wrapper of @code{unsigned char}.
* capi objects clang wchar::    Wrapper of @code{wchar_t}.
* capi objects clang sshrt::    Wrapper of @code{signed short int}.
* capi objects clang ushrt::    Wrapper of @code{unsigned short int}.
* capi objects clang sint::     Wrapper of @code{signed int}.
* capi objects clang uint::     Wrapper of @code{unsigned int}.
* capi objects clang slong::    Wrapper of @code{signed long int}.
* capi objects clang ulong::    Wrapper of @code{unsigned long int}.
* capi objects clang sllong::   Wrapper of @code{signed long long int}.
* capi objects clang ullong::   Wrapper of @code{unsigned long long int}.
* capi objects clang sintmax::  Wrapper of @code{intmax_t}.
* capi objects clang uintmax::  Wrapper of @code{uintmax_t}.
* capi objects clang ssize::    Wrapper of @code{ssize_t}.
* capi objects clang usize::    Wrapper of @code{size_t}.
* capi objects clang ptrdiff::  Wrapper of @code{ptrdiff_t}.
* capi objects clang sint8::    Wrapper of @code{int8_t}.
* capi objects clang uint8::    Wrapper of @code{uint8_t}.
* capi objects clang sint16::   Wrapper of @code{int16_t}.
* capi objects clang uint16::   Wrapper of @code{uint16_t}.
* capi objects clang sint32::   Wrapper of @code{int32_t}.
* capi objects clang uint32::   Wrapper of @code{uint32_t}.
* capi objects clang sint64::   Wrapper of @code{int64_t}.
* capi objects clang uint64::   Wrapper of @code{uint64_t}.
* capi objects clang float::    Wrapper of @code{float}.
* capi objects clang double::   Wrapper of @code{double}.
* capi objects clang ldouble::  Wrapper of @code{long double}.
@end menu

@DocumentNumberValueWithIntegerRep{char, char}
@DocumentNumberValueWithIntegerRep{schar, signed char}
@DocumentNumberValueWithIntegerRep{uchar, unsigned char}
@DocumentNumberValueWithUsrptrRep{wchar, wchar_t}
@DocumentNumberValueWithIntegerRep{sshrt, signed short int}
@DocumentNumberValueWithIntegerRep{ushrt, unsigned short int}
@DocumentNumberValueWithUsrptrRep{sint, signed int}
@DocumentNumberValueWithUsrptrRep{uint, unsigned int}
@DocumentNumberValueWithUsrptrRep{slong, signed long int}
@DocumentNumberValueWithUsrptrRep{ulong, unsigned long int}
@DocumentNumberValueWithUsrptrRep{sllong, signed long long int}
@DocumentNumberValueWithUsrptrRep{ullong, unsigned long long int}
@DocumentNumberValueWithUsrptrRep{sintmax, intmax_t}
@DocumentNumberValueWithUsrptrRep{uintmax, uintmax_t}
@DocumentNumberValueWithUsrptrRep{ssize, ssize_t}
@DocumentNumberValueWithUsrptrRep{usize, size_t}
@DocumentNumberValueWithUsrptrRep{ptrdiff, ptrdiff_t}
@DocumentNumberValueWithIntegerRep{sint8, int8_t}
@DocumentNumberValueWithIntegerRep{uint8, uint8_t}
@DocumentNumberValueWithIntegerRep{sint16, int16_t}
@DocumentNumberValueWithIntegerRep{uint16, uint16_t}
@DocumentNumberValueWithUsrptrRep{sint32, int32_t}
@DocumentNumberValueWithUsrptrRep{uint32, uint32_t}
@DocumentNumberValueWithUsrptrRep{sint64, int64_t}
@DocumentNumberValueWithUsrptrRep{uint64, uint64_t}
@DocumentNumberValueWithUsrptrRep{float, float}
@DocumentNumberValueWithFloatRep{double, double}
@DocumentNumberValueWithUsrptrRep{ldouble, ldouble}

@c page
@c ------------------------------------------------------------
@c Appendices.
@c ------------------------------------------------------------

@include gpl-3.0.texi
@include fdl-1.3.texi

@c page
@node references
@appendix Bibliography and references


The documentation of @value{PACKAGE} is available online:

@center @value{DocumentationUrl}

@noindent
the latest release of this package can be downloaded from:

@center @value{DownloadUrl}

@noindent
development takes place at:

@center @value{GithubUrl}

@noindent
and as backup at:

@center @value{BitbucketUrl}

We can found informations and examples about Emacs modules at the repository mirror, under the
@file{modules} directory:

@center @url{https://github.com/emacs-mirror/emacs}

There is also a list of resources about Emacs modules:

@center @url{https://github.com/emacs-pe/emacs-modules}

@c page
@node concept index
@appendix An entry for each concept

@printindex cp

@node function index
@appendix An entry for each function.

@printindex fn

@node variable index
@appendix An entry for each variable.

@printindex vr

@node type index
@appendix An entry for each type.

@printindex tp

@contents
@bye

@c end of file

